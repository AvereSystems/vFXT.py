parameters:
  - name: ORIGINAL_NODE_COUNT
    displayName: "Original Node Count"
    type: number
    default: 3
    values:
      - 3
      - 14
  
  - name: SCALE_UP_NODE_COUNT
    displayName: "Scale Up Node Count +"
    type: number
    default: 2
    values:
      - 2
  
  - name: run_terraform
    displayName: "Select terraform example to run"
    type: string
    default: "1-filer"
    values:
      - "1-filer"
      - "proxy"
  

  - name: P_RUN_Scale_Up
    displayName: "Run scale-up"
    type: boolean
    default: true

  - name: P_RUN_Scale_Down
    displayName: "Run scale-down"
    type: boolean
    default: true
  
variables:
  _RUN_Scale_Up: $[lower('${{ parameters.P_RUN_Scale_Up }}')]
  _RUN_Scale_Down: $[lower('${{ parameters.P_RUN_Scale_Down }}')]

jobs:
- job: Terraform_example
  timeoutInMinutes: 60
  pool:
    vmImage: ubuntu-latest
  steps:  
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'id_rsa'
  
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'pip.conf'

  - script: |
      set -e
      cp $AGENT_TEMPDIRECTORY/pip.conf .
      ln -s $AGENT_TEMPDIRECTORY ~/.ssh
      chmod 600 ~/.ssh/id_rsa
      ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    displayName: 'SETUP: SSH keys'
    condition: succeeded()
    failOnStderr: true
  
  - script: |
      az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
      wget https://releases.hashicorp.com/terraform/0.12.25/terraform_0.12.25_linux_amd64.zip
      unzip terraform_0.12.25_linux_amd64.zip
      sudo mv terraform /usr/local/bin
      sudo chmod 755 /usr/local/bin/terraform
      
      mkdir -p ~/.terraform.d/plugins
      wget -O ~/.terraform.d/plugins/terraform-provider-avere https://github.com/Azure/Avere/releases/download/tfprovider_v0.9.29/terraform-provider-avere
      chmod 755 ~/.terraform.d/plugins/terraform-provider-avere

      export RESOURCE_GROUP_NAME="tf$(date -u +'%m%dx%H%M%S')"
      export REGION=westus
      cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
      sshkey="$(cat ~/.ssh/id_rsa.pub) azureuser@linuxvm"

      echo "##vso[task.setvariable variable=secret.SSH_KEY;issecret=true]${sshkey}"

      sed -i "s:vm_ssh_key_data = null:vm_ssh_key_data = \"${sshkey}\":" main.tf
      sed -i "s/location = \"eastus\"/location = \"${REGION}\"/" main.tf
      sed -i "s/network_resource_group_name = \"network_resource_group\"/network_resource_group_name = \"${RESOURCE_GROUP_NAME}-network\"/" main.tf
      sed -i "s/filer_resource_group_name = \"filer_resource_group\"/filer_resource_group_name = \"${RESOURCE_GROUP_NAME}-filer\"/" main.tf
      sed -i "s/vfxt_resource_group_name = \"vfxt_resource_group\"/vfxt_resource_group_name = \"${RESOURCE_GROUP_NAME}-vfxt\"/" main.tf
      sed -i "s/vfxt_cluster_password = \"VFXT_PASSWORD\"/vfxt_cluster_password = \"${AVERE_ADMIN_PW}\"/" main.tf
      sed -i 's/vfxt_node_count = 3/vfxt_node_count = ${{ parameters.ORIGINAL_NODE_COUNT }}\n    node_cache_size = 1024\n    node_size = "unsupported_test_SKU"/' main.tf
      
    displayName: 'Terraform Setup'
    name: setup
    condition: succeeded()
    env:
      ARM_TENANT_ID: $(AZURE-TENANT-ID)
      ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
      ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)
      AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
  
  - ${{ if eq(parameters.run_terraform, '1-filer') }}:
    - script: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
        cat main.tf

        terraform init 
        terraform apply -auto-approve
      displayName: 'Terraform Apply: 1-Filer'
      env:
        ARM_TENANT_ID: $(AZURE-TENANT-ID)
        ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
        ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
        ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)
        AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
  
  - ${{ if eq(parameters.run_terraform, 'proxy') }}:
    - script: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}

        sed -i "s/storage_account_name = \"storageaccount\"/storage_account_name = \"$(setup.RESOURCE_GROUP_NAME)\"/" main.tf
        sed -i "s/proxy_resource_group_name = \"proxy_resource_group\"/proxy_resource_group_name = \"$(setup.RESOURCE_GROUP_NAME)-proxy\"/" main.tf
        sed -i "s/storage_resource_group_name = \"storage_resource_group\"/storage_resource_group_name = \"$(setup.RESOURCE_GROUP_NAME)-storage\"/" main.tf
        
        cat main.tf

        terraform init 
        terraform apply -auto-approve
      displayName: 'Terraform Apply: Proxy'
      env:
        ARM_TENANT_ID: $(AZURE-TENANT-ID)
        ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
        ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
        ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)
        AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
  
  - script: |
      cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
      orig_node=${{ parameters.ORIGINAL_NODE_COUNT }}
      scale_up=${{ parameters.SCALE_UP_NODE_COUNT }}
      export new_node_count=$(( $orig_node + $scale_up ))
      sed -i 's/vfxt_node_count = ${{ parameters.ORIGINAL_NODE_COUNT }}/vfxt_node_count = ${new_node_count}/' main.tf
      terraform apply -auto-approve
    displayName: 'Terraform - scale up'
    condition: and(not(or(failed(), canceled())), eq(variables['_RUN_Scale_Up'], 'true'))
    env:
      ARM_TENANT_ID: $(AZURE-TENANT-ID)
      ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
      ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
      orig_node=${{ parameters.ORIGINAL_NODE_COUNT }}
      scale_up=${{ parameters.SCALE_UP_NODE_COUNT }}
      export new_node_count=$(( $orig_node + $scale_up ))
      sed -i 's/vfxt_node_count = ${new_node_count}/vfxt_node_count = ${{ parameters.ORIGINAL_NODE_COUNT }}/' main.tf
      terraform apply -auto-approve
    displayName: 'Terraform - scale down'
    condition: and(not(or(failed(), canceled())), eq(variables['_RUN_Scale_Down'], 'true'))
    env:
      ARM_TENANT_ID: $(AZURE-TENANT-ID)
      ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
      ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
      terraform destroy -auto-approve
    displayName: 'Terraform Destroy'
    condition: always()
    env:
      ARM_TENANT_ID: $(AZURE-TENANT-ID)
      ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
      ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)