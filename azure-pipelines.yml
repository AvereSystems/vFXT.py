# https://aka.ms/yaml
# trigger:
# - master
# - releases/*

variables:
  VFXT_TEST_VARS_FILE: 'pipelines.json'

jobs:
- job: vfxt_template_testing
  timeoutInMinutes: 180
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'id_rsa'

  - script: |
      set -e
      ln -s $AGENT_TEMPDIRECTORY ~/.ssh
      chmod 600 ~/.ssh/id_rsa
      ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    displayName: 'SETUP: SSH keys'
    condition: succeeded()

  - script: |
      set -xe
      pip install --upgrade pip setuptools wheel
      pip install -r test/requirements.txt
    displayName: 'SETUP: Install Python dependencies'
    condition: succeeded()

  - script: |
      python test/region_deploy_utils.py --get_next_region > REGION_TO_TEST

      if [[ "$?" -eq "0" ]]; then
        echo "REGION TO TEST: $(cat REGION_TO_TEST)"
      fi
    displayName: 'SETUP: Get region to test in'
    condition: and(succeeded(), eq(variables['VFXT_DEPLOY_LOCATION'], ''))
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)
      PIPELINES_DATA_STORAGE_ACCOUNT: $(PIPELINES-DATA-STORAGE-ACCOUNT)
      PIPELINES_DATA_STORAGE_ACCOUNT_KEY: $(PIPELINES-DATA-STORAGE-ACCOUNT-KEY)
      PIPELINES_DATA_TABLE_NAME: $(PIPELINES-DATA-TABLE-NAME)

  - script: |
      if [[ -z "$VFXT_DEPLOY_LOCATION" -a -s REGION_TO_TEST ]]; then
        export VFXT_DEPLOY_LOCATION=$(cat REGION_TO_TEST)
      fi
      echo "\$VFXT_DEPLOY_LOCATION  = $VFXT_DEPLOY_LOCATION"
      echo "\$VFXT_DEPLOY_NEW_VNET  = $VFXT_DEPLOY_NEW_VNET"
      echo "\$VFXT_DEPLOY_WITH_BLOB = $VFXT_DEPLOY_WITH_BLOB"

      test_to_run="Unrecognized_Deploy_Options"
      if   [[ "true"  = $VFXT_DEPLOY_NEW_VNET &&
              "true"  = $VFXT_DEPLOY_WITH_BLOB ]]; then
          test_to_run="test/test_vfxt_template_deploy.py::TestVfxtTemplateDeploy::test_deploy_template"

      elif [[ "true"  = $VFXT_DEPLOY_NEW_VNET &&
              "false" = $VFXT_DEPLOY_WITH_BLOB ]]; then
          test_to_run="test/test_vfxt_template_deploy.py::TestVfxtTemplateDeploy::test_no_storage_account_deploy"

      elif [[ "false" = $VFXT_DEPLOY_NEW_VNET &&
              "true"  = $VFXT_DEPLOY_WITH_BLOB ]]; then
          test_to_run="test/test_vfxt_template_deploy.py::TestVfxtTemplateDeploy::test_byovnet_deploy"

      elif [[ "false" = $VFXT_DEPLOY_NEW_VNET &&
              "false" = $VFXT_DEPLOY_WITH_BLOB ]]; then
          test_to_run="Not_Yet_Implemented"

      else
          # The VFXT_DEPLOY_* variables checked above are strings and not
          # constrained to "true" or "false" for their values.
          echo 'ERROR: Unrecognized deploy options. \$VFXT_DEPLOY_* above should be "true" or "false":'
      fi

      set -x
      pytest BAD_VALUE_ON_PURPOSE $PYTEST_OPTIONS \
        --location $VFXT_DEPLOY_LOCATION
      # pytest $test_to_run $PYTEST_OPTIONS \
      #   --location $VFXT_DEPLOY_LOCATION \
      #   --doctest-modules --junitxml=junit/test-deploy.xml
    displayName: 'TEST: Deploy vFXT cluster'
    condition: succeeded()
    env:
      AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
      AVERE_CONTROLLER_PW: $(AVERE-CONTROLLER-PW)
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      # Check for common error messages that might occur during deployment.
      deploy_results_file="junit/test-deploy.xml"
      declare -a common_errors=(
        "Operation results in exceeding quota limits"
        "A hash conflict was encountered for the role Assignment ID"
        "Corefiler configured with empty bucket but bucket \S+ has existing data"
      )

      echo
      echo
      for ce in "${common_errors[@]}"; do
          grep_res=$(grep -E "$ce" $deploy_results_file)
          if [[ -n $grep_res ]]; then
              echo "MESSAGE FOUND: $ce"
              msg_found=1
          fi
      done

      if [[ -z $msg_found ]]; then
        echo "No common error messages found in $deploy_results_file"
        echo
        echo
        echo "Dumping $deploy_results_file:"
        cat $deploy_results_file
        exit 1
      fi
    displayName: 'CHECK: Common deploy error messages'
    condition: or(failed(), canceled())

  - script: |
      if [[ -f $VFXT_TEST_VARS_FILE ]]; then
        cat $VFXT_TEST_VARS_FILE
      fi

      set -x
      pytest test/test_vfxt_cluster_status.py $PYTEST_OPTIONS \
        -k TestVfxtClusterStatus \
        --doctest-modules --junitxml=junit/test-results02.xml
    displayName: 'TEST: Cluster status, health'
    condition: succeeded()
    env:
      AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
      AVERE_CONTROLLER_PW: $(AVERE-CONTROLLER-PW)
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      set -x
      pytest test/test_vfxt_cluster_status.py $PYTEST_OPTIONS \
        -k TestVfxtSupport \
        --doctest-modules --junitxml=junit/test-results03.xml
    displayName: 'TEST: Collect deployment artifacts, log files'
    condition: always()
    env:
      AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
      AVERE_CONTROLLER_PW: $(AVERE-CONTROLLER-PW)
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      DEPLOY_ID=$(jq -r .deploy_id $VFXT_TEST_VARS_FILE)
      CONTROLLER_NAME=$(jq -r .controller_name $VFXT_TEST_VARS_FILE)
      T_ARTIFACTS_DIR="vfxt_artifacts_${DEPLOY_ID}"

      echo "DEPLOY_ID: $DEPLOY_ID"
      echo "CONTROLLER_NAME: $CONTROLLER_NAME"
      echo "T_ARTIFACTS_DIR: $T_ARTIFACTS_DIR"

      P_ARTIFACTS_DIR="$BUILD_SOURCESDIRECTORY/test_artifacts"
      mkdir -p $P_ARTIFACTS_DIR
      tar -zcvf ${P_ARTIFACTS_DIR}/vfxt_artifacts_${DEPLOY_ID}.tar.gz ${T_ARTIFACTS_DIR}

      echo "vfxt.log from ${T_ARTIFACTS_DIR}:"
      cat ${T_ARTIFACTS_DIR}/vfxt.log
    displayName: 'ARCHIVE: Deployment artifacts, log files'
    condition: always()

  - script: |
      grep -i -C 5 -e vfxt:ERROR -e exception $BUILD_SOURCESDIRECTORY/test_artifacts/vfxt.log
    displayName: 'CHECK: Grep errors from vfxt.log (+/- 5 lines)'
    condition: or(failed(), canceled())

  - script: |
      set -x
      pytest test/test_vdbench.py $PYTEST_OPTIONS \
        --doctest-modules --junitxml=junit/test-results04.xml
    displayName: 'TEST: vdbench'
    condition: and(succeeded(), eq(variables['RUN_VDBENCH_STEP'], 'true'))
    env:
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - script: |
      set -x
      pytest test/test_edasim.py $PYTEST_OPTIONS \
        --doctest-modules --junitxml=junit/test-results05.xml
    displayName: 'TEST: edasim'
    condition: and(succeeded(), eq(variables['RUN_EDASIM_STEP'], 'true'), eq(variables['RUN_EMPTY_STORAGE'], 'false'))
    env:
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
      AZURE_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

  - task: PublishPipelineArtifact@0
    displayName: 'PUBLISH: Deployment artifacts, log files'
    inputs:
      artifactName: 'testArtifacts'
      targetPath: 'test_artifacts'
    condition: always()

  - script: |
      az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
      RESOURCE_GROUP=$(jq -r .resource_group $VFXT_TEST_VARS_FILE)
      echo "Deleting resoruce group: $RESOURCE_GROUP"
      az group delete --yes -n $RESOURCE_GROUP

      if [[ "false" = $VFXT_DEPLOY_NEW_VNET ]]; then
        echo "Deleting resource group (vnet): ${RESOURCE_GROUP}-vnet"
        az group delete --yes -n "${RESOURCE_GROUP}-vnet"
      fi
    displayName: 'CLEAN UP: Delete resource group(s)'
    condition: and(always(), ne(variables['SKIP_RG_CLEANUP'], 'true'))
    env:
      AZURE_TENANT_ID: $(AZURE-TENANT-ID)
      AZURE_CLIENT_ID: $(AZURE-CLIENT-ID)
      AZURE_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: 'junit/test-*.xml'
      testRunTitle: 'PUBLISH: pytest results'
