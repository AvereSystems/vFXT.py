steps:
- script: |
    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
    cd src/terraform/examples/vfxt/${RUN_TERRAFORM_FILE}
    CONTROLLER_ADDRESS=$(terraform output -json | jq -r ".controller_address.value")
    USERNAME=$(terraform output -json | jq -r ".controller_username.value")
    VSERVER_IP_ADDRESSES=$(terraform output -json | jq -c ".mount_addresses.value")
    NFS_EXPORT_PATH=$(terraform output -json | jq -r ".mount_namespace_path.value")
    ssh_key_data="$(cat ~/.ssh/id_rsa.pub) azureuser@linuxvm"
    echo "##vso[task.setvariable variable=secret.SSH_KEY_DATA;issecret=true]${ssh_key_data}"
    cd ../vdbench
    
    terraform init
    TF_LOG=INFO terraform apply -auto-approve -var="location=${REGION}" \
      -var="vmss_resource_group_name=${RESOURCE_GROUP_NAME}-vmss" \
      -var="controller_address=${CONTROLLER_ADDRESS}" \
      -var="controller_username=${USERNAME}" \
      -var="ssh_key_data=${ssh_key_data}" \
      -var="vserver_ip_addresses=${VSERVER_IP_ADDRESSES}" \
      -var="nfs_export_path=${NFS_EXPORT_PATH}" \
      -var="vdbench_url=${VDBENCH_URL}" \
      -var="vnet_resource_group=${RESOURCE_GROUP_NAME}-network"

    IP_ADDRESS_COMMAND=$(terraform output -json | jq -r ".vmss_addresses_command.value") 
    IP_ADDRESS=$(${IP_ADDRESS_COMMAND} | jq -r '.[0]')
    ID=$(terraform output -json | jq -r ".vmss_id.value")
    VMSNAME=$(terraform output -json | jq -r ".vmss_name.value")
    
    scp -o "ProxyJump ${USERNAME}@${CONTROLLER_ADDRESS}" ~/.ssh/id_rsa ${USERNAME}@${IP_ADDRESS}:.ssh/id_rsa
    ssh -J ${USERNAME}@${CONTROLLER_ADDRESS} ${USERNAME}@${IP_ADDRESS} /home/azureuser/copy_idrsa.sh
    ssh -J ${USERNAME}@${CONTROLLER_ADDRESS} ${USERNAME}@${IP_ADDRESS} "/usr/bin/nohup /bin/bash -c \"/bin/bash /home/${USERNAME}/run_vdbench.sh inmem.conf uniquestring1 >> /home/${USERNAME}/vdb.log 2>&1 &\" "
    

    # export _CMD_OK_MSG="CMD_OK_$(head /dev/urandom | tr -dc a-zA-Z0-9 | head -c5)"
    # export _CMD_LOG="cmd_output.log"
    # export _FAIL_MSG="##vso[task.logissue type=error;]VMSS run-command failure. See log for details."

    #  # Save list of VMSS instances' reference IDs.
    # _VMSS_INSTANCE_IDS=$(az vmss list-instances   \
    #     --resource-group ${RESOURCE_GROUP_NAME}-vmss   \
    #     --name ${VMSNAME}                      \
    #     --query "[].id" --output tsv)
    # echo "> _VMSS_INSTANCE_IDS: ${_VMSS_INSTANCE_IDS}"

    # _VMSS_INSTANCE_ID_0=$(echo ${_VMSS_INSTANCE_IDS} | sed 's/ .*$//')
    # echo "> _VMSS_INSTANCE_ID_0: ${_VMSS_INSTANCE_ID_0}"

    # echo
    # echo "> ALL VMs: SSH setup"
    # for id in ${_VMSS_INSTANCE_IDS}; do
    #   az vmss run-command invoke      \
    #       --command-id RunShellScript \
    #       --ids ${id} \
    #       --scripts "cp /home/${USERNAME}/.ssh/id_rsa /root/.ssh/ && echo ${_CMD_OK_MSG}" | tee ${_CMD_LOG} 2>&1
    #   grep -q ${_CMD_OK_MSG} ${_CMD_LOG} || (echo "${_FAIL_MSG}")
    # done

    # echo
    # echo "> ALL VMs: SSH setup"
    # for id in ${_VMSS_INSTANCE_IDS}; do
    #   az vmss run-command invoke      \
    #       --command-id RunShellScript \
    #       --ids ${id} \
    #       --scripts "/home/${USERNAME}/copy_idrsa.sh && echo ${_CMD_OK_MSG}" | tee ${_CMD_LOG} 2>&1
    #   grep -q ${_CMD_OK_MSG} ${_CMD_LOG} || (echo "${_FAIL_MSG}")
    # done

    # echo
    # echo "> VM-0: Run vdbench in tmux session (vdbench_runner)"
    # az vmss run-command invoke       \
    #     --command-id RunShellScript  \
    #     --ids ${_VMSS_INSTANCE_ID_0} \
    #     --scripts "/usr/bin/nohup /bin/bash -c \"/bin/bash /home/${USERNAME}/run_vdbench.sh inmem.conf uniquestring1 >> /home/${USERNAME}/vdb.log 2>&1 &\"  && echo ${_CMD_OK_MSG}" | tee ${_CMD_LOG} 2>&1
    # grep -q ${_CMD_OK_MSG} ${_CMD_LOG} || (echo "${_FAIL_MSG}")

    # ssh -J ${USERNAME}@${CONTROLLER_ADDRESS} ${USERNAME}@${IP_ADDRESS} "/usr/bin/nohup /bin/bash -c \"/bin/bash /home/${USERNAME}/run_vdbench.sh inmem.conf uniquestring1 >> /home/${USERNAME}/vdb.log 2>&1 &\" "
    
    
    # scp ~/.ssh/id_rsa ${USERNAME}@${IP_ADDRESS}:.ssh/.
    # ssh -J ${USERNAME}@${IP_ADDRESS} /home/${USERNAME}/copy_idrsa.sh

    # ssh -J ${USERNAME}@${IP_ADDRESS} "/usr/bin/nohup /bin/bash -c \"/bin/bash /home/${USERNAME}/run_vdbench.sh inmem.conf uniquestring1 >> /home/${USERNAME}/vdb.log 2>&1 &\" &"
    
  displayName: 'Run vdbench'
  env:
    VDBENCH_URL: $(VDBENCH-URL)