# Copyright (C) Microsoft Corporation. All rights reserved.
# https://aka.ms/yaml
parameters:
- name: run_terraform
  type: string
- name: cmd_terraform
  type: string
  values:
  - "apply"
  - "destroy"
- name: condition
  type: string
  default: "always()"
  values:
    - "always()"
    - "succeededOrFailed()"
    - "succeeded()"
    - "failed()"


steps:
- script: |
    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
    cd src/terraform/examples/vfxt/${{ parameters.run_terraform }}
    terraform init 

    tf_rc=111111
    for i in {1..3}; do
      TF_LOG=INFO terraform ${{ parameters.cmd_terraform }} -auto-approve
      tf_rc=$?
      if [ "${tf_rc}" -ne 0 ]; then
        echo "##vso[task.logissue type=warning;]Terraform ${{ parameters.cmd_terraform }} did not work. Attempt $i of 3."
        # Adding sleep if terraform destroy so locks can clear up.
        if [ "destroy" = "${{ parameters.cmd_terraform }}" ]; then
          sleep 30
        fi
      else
        break
      fi
    done

    if [ "${tf_rc}" -ne 0 ]; then
      echo "##vso[task.logissue type=error;]Terraform ${{ parameters.cmd_terraform }} failed. See log for details."
      echo "##vso[task.complete result=Failed;]"
      echo "##vso[build.addbuildtag]FAIL Terraform"
    else
      echo " ${{ parameters.cmd_terraform }} ${{ parameters.run_terraform }} successfully completed."
    fi
  displayName: 'Terraform: ${{ parameters.cmd_terraform }} ${{ parameters.run_terraform }}'
  condition: ${{ parameters.condition }}
  env: 
    ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
    ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
    ARM_TENANT_ID: $(AZURE-TENANT-ID)
    ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)

