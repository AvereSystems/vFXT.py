#!/usr/bin/env python
#src/tools/xmlrpc.py
import ast
import os
import sys
import errno
import base64
import getopt
import xmlrpclib
import logging
import pprint
import socket
import httplib
from datetime import datetime
import ssl

def python_ssl_upgrade_error():
    ERRMSG = """\
Python >= 2.7.9 and OpenSSL >= v1.0.1g required. Please upgrade your packages.

As of V4.7.3.1, AvereOS has removed support for outdated HTTPS settings.
TLS v1.2 is required, as are the Modern TLS ciphersuites described here:
  * https://wiki.mozilla.org/Security/Server_Side_TLS
  * https://mozilla.github.io/server-side-tls/ssl-config-generator/

This requires your remote system (i.e. the box you're running this on) to have
AT LEAST the following versions installed:
  * Python >= 2.7.9
  * OpenSSL >= v1.0.1g

For more information, see the Avere OS 4.7 Release Notes at
  * http://library.averesystems.com/#relnotes
"""
    print >>sys.stderr, ERRMSG
    print >>sys.stderr, "Current installed versions:"
    print >>sys.stderr, "  Python: %s" % (sys.version.split()[0])
    try:
        openssl_version = ssl.OPENSSL_VERSION
    except AttributeError:
        openssl_version = "Unable to determine (Python is too old)"
    print >>sys.stderr, "  OpenSSL: %s" % (openssl_version,)
    sys.exit(-1)

try:
    # older Python versions raise an AttributeError for ssl.{PROTOCOL_TLSv1_2,OPENSSL_VERSION_INFO}
    # check explicitly for Python support for TLS v1.2
    _ = ssl.PROTOCOL_TLSv1_2
    if (ssl.OPENSSL_VERSION_INFO < (1,0,1,7)): # at least OpenSSL 1.0.1
        python_ssl_upgrade_error()
except AttributeError:
    python_ssl_upgrade_error()

# for tracking errors when imported from another script
ErrorString = None

## xmlrpc calls that can accept a certificate file, and the argument (position,name)
## where the encoded text of the file should go
RPC_CERT_FILE_ARG = {
    'cert.addCRT': 0, # 0th argument in the list
    'cert.addCABundle': 'pem', # key name for the argument dict
}

class LogRecorderHandler(logging.Handler):
    def __init__(self):
        logging.Handler.__init__(self)

    def handle(self, record):
        global ErrorString
        if (record.levelno == self.level):
            ErrorString = record.message

def _setup_https_sock(h, verbose):
    if verbose:
        h.set_debuglevel(1)
    h.connect()
    h.sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)    # disable Nagle algorithm and send small requests immediately
    h.sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE,1) # check for dead servers
    h.sock.setsockopt(socket.SOL_TCP, socket.TCP_KEEPINTVL, 15) # probe every 15 seconds
    h.sock.setsockopt(socket.SOL_TCP, socket.TCP_KEEPCNT, 8)    # up to 8 attempts == 120 seconds

class CookieAuthXMLRPCTransport(xmlrpclib.SafeTransport):
    '''xmlrpclib.Transport that sends HTTP cookie.'''
    def __init__(self, use_datetime=0, do_cert_checks=True):
        self.verbose = False
        if (not do_cert_checks) and (sys.hexversion > 0x2070900):
            ## Python 2.7.9 and greater checks the CA chains by default; disable it if requested
            ctx = ssl._create_unverified_context()
            xmlrpclib.SafeTransport.__init__(self, use_datetime=use_datetime, context=ctx)
        else:
            xmlrpclib.SafeTransport.__init__(self, use_datetime=use_datetime)
        self._cookie = ""
        # Test if the underlying mechanism is httplib.HTTP (used in Python 2.6
        # and before), or httplib.HTTPConnection (used in Python 2.7). In the
        # latter, a persistent connection is stored in self._connection.
        try:
            getattr(self, '_connection')
            self._has_httpconnection = True
        except AttributeError:
            self._has_httpconnection = False

    def append_cookie(self,cookie):
        if cookie and self._cookie:
            self._cookie = '; '.join((self._cookie, str(cookie)))
        else:
            self._cookie = str(cookie)

    def get_cookie(self):
        return self._cookie

    def send_host(self, connection, host):
        '''Send the Host: header and extra headers.
        Note that in 2.7, this doesn't actually send the Host: header, but we
        just want to send the Cookie: header, and this is the proper place to
        do it.

        '''
        xmlrpclib.SafeTransport.send_host(self, connection, host)
        if self._cookie:
            # Session cookie is set, send it
            connection.putheader('Cookie', self._cookie)

    def request(self, host, handler, request_body, verbose=0):
        '''Send a complete request and return a parsed response.'''
        if self._has_httpconnection:
            #retry request once if cached connection has gone cold
            for i in (0, 1):
                try:
                    return self.single_request(host, handler, request_body, verbose)
                except socket.error as e:
                    if i or e.errno not in (errno.ECONNRESET, errno.ECONNABORTED, errno.EPIPE):
                        raise
                except httplib.BadStatusLine: #close after we sent request
                    if i:
                        raise Exception
        else:
            h = self.make_connection(host)
            _setup_https_sock(h, verbose)
            self.send_request(h, handler, request_body)
            self.send_host(h, host)
            self.send_user_agent(h)
            self.send_content(h, request_body)
            errcode, errmsg, headers = h.getreply()
            if errcode != 200:
                raise xmlrpclib.ProtocolError(host + handler,
                                              errcode, errmsg,
                                              headers
                                              )
            # This returns a python list of cookies
            cookie_header = headers.getheaders('Set-Cookie')
            if cookie_header:
                self._cookie = '; '.join([x.split(';')[0] for x in cookie_header])
            self.verbose = verbose
            try:
                sock = h._conn.sock
            except AttributeError:
                sock = None
            return self._parse_response(h.getfile(), sock)

    def single_request(self, host, handler, request_body, verbose=0):
        '''Issue an XML-RPC request on a persistent HTTPConnection.'''
        h = self.make_connection(host)
        _setup_https_sock(h, verbose)

        try:
            self.send_request(h, handler, request_body)
            self.send_host(h, host)
            self.send_user_agent(h)
            self.send_content(h, request_body)

            response = h.getresponse(buffering=True)
            if response.status == 200:
                self.verbose = verbose
                # This returns a string of cookies (and their extended attributes) separated by commas
                cookie_header = response.getheader('set-cookie')
                if cookie_header:
                    cookies = cookie_header.split(', ')
                    self._cookie = '; '.join([x.split(';')[0] for x in cookies])
                return self.parse_response(response)
        except xmlrpclib.Fault:
            raise
        except Exception:
            # All unexpected errors leave connection in
            # a strange state, so we clear it.
            self.close()
            raise

        #discard any response data and raise exception
        if (response.getheader("content-length", 0)):
            response.read()
        raise xmlrpclib.ProtocolError(host + handler,
                                      response.status, response.reason,
                                      response.msg,
                                      )

def getXmlrpcClient(server_uri, cookie, verbose=False, do_cert_checks=True):
    '''Return an xmlrpc client which supports authentication via cookies'''
    trans = CookieAuthXMLRPCTransport(do_cert_checks=do_cert_checks)
    if cookie:
        trans.append_cookie(cookie)
    server = xmlrpclib.Server(server_uri, transport=trans, verbose=verbose)
    return server

class PrintFormat(object):
    RAW = 0     # No interpretation, raw python data structures
    PLAIN = 1     # Slightly more human-readable (some interpretation, but not much)
    PRETTY = 2     # A more human-readable format

def print_plain(res):
    if isinstance(res, str):
        sys.stdout.write('%s\n' % res)
    elif isinstance(res, unicode):
        reload(sys)
        oldencoding = sys.getdefaultencoding()
        sys.setdefaultencoding("utf-8")
        sys.stdout.write(res.encode('utf-8'))
        sys.setdefaultencoding(oldencoding)
    elif isinstance(res, int):
        sys.stdout.write('%d\n' % res)
    elif isinstance(res, float):
        sys.stdout.write('%f\n' % res)
    elif isinstance(res, bool):
        sys.stdout.write('%s\n' % res)
    elif isinstance(res, list):
        for r in res:
            sys.stdout.write('%s\n' % r)
    elif isinstance(res, dict):
        maxlen = 0
        for k in res:
            maxlen = max(maxlen, len(k))
        fmtstr = "%%-%ds = '%%s'\n" % maxlen
        for k in res:
            sys.stdout.write(fmtstr % (k, res[k]))
    else:
        sys.stdout.write('??? (value \'%s\' of type %s)\n' % (str(res)[0:16], type(res)))

def print_result(print_format, res):
    if (print_format == PrintFormat.RAW):
        sys.stdout.write('%s\n' % res)
    elif (print_format == PrintFormat.PLAIN):
        print_plain(res)
    elif (print_format == PrintFormat.PRETTY):
        sys.stdout.write('res = ')
        pprint.pprint(res, width=120)
    else:
        logging.debug('*** Unknown print format : %s\n', print_format)
        print_plain(res)

def convert_arg_to(cvt_in, cvt_to):
    # pylint: disable=redefined-variable-type
    logging.debug("Convert: arg '%s' to type '%s'", cvt_in, cvt_to)
    cvt_out = None
    if cvt_to == 'boolean':
        cvt_out = (cvt_in.lower() == 'true')
    elif cvt_to in ['int', 'integer']:
        cvt_out = int(cvt_in)
    elif cvt_to == 'float':
        cvt_out = float(cvt_in)
    elif cvt_to == 'string':
        cvt_out = str(cvt_in)
    elif cvt_to == 'base64':
        cvt_out = base64.encodestring('%s' % cvt_in)
    elif cvt_to == 'datetime':
        cvt_out = datetime.strptime(cvt_in, '%b %d %Y %I:%M%p')
    elif cvt_to == 'array':
        s = ast.literal_eval(str(cvt_in))
        if not isinstance(s, list):
            raise Exception('Bad conversion to array')
        cvt_out = s
    elif cvt_to == 'struct':
        s = ast.literal_eval(str(cvt_in))
        if not isinstance(s, dict):
            raise Exception('Bad conversion to structure')
        cvt_out = s
    else:
        raise Exception('Don\'t know how to convert to %s' % cvt_to)
    logging.debug("Convert: result is '%s' " % cvt_out)
    return cvt_out

def usage():
    print 'xmlrpc [--server addr] method [args]'
    print ''
    print '  --server addr      : server to call.'
    print '  --help             : show this message'
    print '  --help method      : show help for method (alias for system.methodHelp method)'
    print '  --modules          : list all modules (alias for system.listModules)'
    print '  --methods          : list all methods (alias for system.listMethods)'
    print '  --methods module   : list all methods for module (alias for system.listMethods module)'
    print '  --nologin          : skip login call'
    print '  --simple-proxy     : use plain xmlrpc ServerProxy (implies --nologin)'
    print '  --user             : login as user (default: "admin")'
    print '  --password         : user password (default: "")'
    print '  --prompt           : prompt for user password'
    print '  --apis name[,name] : enable the names API(s) for the xmlrpc call'
    print '  --verbose          : be verbose'
    print '  --http-verbose     : trace http calls'
    print '  --quiet            : just the facts, m\'am'
    print '  --normal           : print normal results (default)'
    print '  --pretty           : pretty-print results'
    print '  --raw              : print raw return data (suitable for an eval in python)'
    print '  --upload_keytab    : path to keytab to upload with nfs.uploadKeytab'
    print '  --upload_pem       : path to certificate file/bundle to upload (in PEM format)'
    print '  --no-check-certificate : do not validate SSL certificate authority (CA) chains (not secure)'
    print ''
    print 'If --server is not supplied, use the value of the environment variable XMLRPC_SERVER if found.'
    print ''
    print 'Examples:'
    print '  xmlrpc --server a.b.c.d --modules'
    print '  xmlrpc --server a.b.c.d --methods'
    print '  xmlrpc --server a.b.c.d --methods cifs'
    print '  xmlrpc --server a.b.c.d system.listModules'
    print '  xmlrpc --server a.b.c.d system.listMethods cifs'
    print '  xmlrpc --server a.b.c.d system.methodHelp cifs.getConfig'
    print '  xmlrpc --server a.b.c.d --help cifs.getConfig'
    print '  xmlrpc --server a.b.c.d vserver.list'
    print '  xmlrpc --server a.b.c.d cifs.getConfig my_vserver_name'
    print '  xmlrpc --server a.b.c.d --apis maintenance node.reformat my_node_name'
    print '  xmlrpc --server a.b.c.d --upload_keytab /path/to/keytab nfs.uploadKeytab my_vserver_name'
    print '  xmlrpc --server a.b.c.d --upload_pem /path/to/ca_bundle.crt cert.addCABundle my_new_cabundle'
    print '  xmlrpc --server a.b.c.d --upload_pem /path/to/signed_cert_request.crt cert.addCRT'
    print ''
    print 'All arguments are converted to the expected call type.'
    print ''
    print 'Argument of type "struct" can be represented using a quoted Python dict, ex:'
    print '  "{ \'some_name\' : \'some_value\' }"'
    print ''
    print 'Arguments of type "array" can be represented using a quoted Python array, ex:'
    print '  "[ 10, 20, 30, \'string_value\' ]"'
    print ''
    print 'Only simple structures and arrays are supported.'
    print ''

def ssl_usage():
    usage_str = """
   If validation of the FXT's SSL certificate failed,
   there are several possible reasons:
     A. Your Python/OpenSSL library did not negotiate a TLSv1 or higher
        connection to the server. On the FXT:
        * SSLv2 and SSLv3 are deprecated due to security holes
        * Outdated and insecure algorithms are disabled (e.g. RC4, DES)
     B. The FXT SSL certificate is not signed by a Certificate Authority (CA)
        that is trusted by your local machine
     C. The FXT does not have a signed SSL certificate, and the self-signed
        FXT SSL cert is not installed in your local trust store
     D. You have properly signed or locally installed the FXT cert,
        but the hostnames in the certificate do not match those given
        in the cert itself.
        NOTE: Python does not match IP addresses in certificates:
           https://docs.python.org/2/library/ssl.html#certificate-handling
     E. You have already done the above, and you are experiencing a
        man-in-the-middle attack

   Your options include (pick one or more):
     0. (Reason A) Upgrade your OpenSSL and/or Python installation to one that
        supports newer algorithms and protocols.
     1. (Reason B) Tell the FXT cluster to use a certificate signed by a CA
        that you trust. Choose one of the following:
        a. Create a new server certificate for the FXT cluster, signed by your
           preferred Certificate Authority (CA). Upload the signed cert to the
           cluster, then activate it.
        b. Create a Certificate Signing Request (CSR) via the cluster management
           GUI, and send it to your CA for signing. Add/Upload the completed
           request to the cluster via the same interface.
     2. (Reason C) If you do not have a trusted CA, download the cluster's
        SSL certificate into your local filesystem.
        The 'getcert.sh' program can do most of this for you, except:
        ***                                                                  ***
        *** It cannot verify that the file you received matches the one used ***
        *** by the FXT; it is vulnerable to a man-in-the-middle attack, so   ***
        *** you must use some separate mechanism to verify that the key is   ***
        *** correct!                                                         ***
        ***                                                                  ***
     3. (Reason D) If you have already done all of that, verify that the
        hostname shown in the certificate matches the hostname you are passing
        to the --server option. In general, this should be a fully qualified
        domain name that DNS resolves to an Avere FXT management IP address.
     4. (Reason E) You can throw caution to the wind, skip SSL certificate
        verification, and make yourself vulnerable to a man-in-the-middle attack
        that would provide your attacker with the login username and password
        used in the XMLRPC session. Use the (dangerous) --no-check-certificate
        option.
"""
    print usage_str
    return

def validate_arguments(s, method, args):
    arg_types = []

    logging.debug('Finding matching signature for %s' % method)

    try:
        atls = s.system.methodSignature(method)
        if isinstance(atls, basestring) and 'not supported' in atls:
            logging.debug('Server does not support method signatures')
            arg_types = ['string'] * len(args)
        else:
            if not isinstance(atls, list):
                raise Exception('Unexpected type for method signature: %s' % type(atls))
            atl_match = None
            atl_str = 0
            for atl in atls:
                if not isinstance(atl, basestring):
                    atl = ', '.join(atl)
                pos_atl = map(lambda x: x.strip(), atl.split(','))
                pos_atl = pos_atl[1:]
                pos_str = 0
                logging.debug('Checking signature: %s' % pos_atl)
                if len(pos_atl) == len(args):
                    for i in range(0, len(args)):
                        cvt_in = args[i]
                        cvt_to = pos_atl[i]
                        try:
                            convert_arg_to(cvt_in, cvt_to)
                            # Matching type 'string' is weaker, since
                            # anything can match 'string'
                            if cvt_to == 'string':
                                pos_str += 1
                            else:
                                pos_str += 2
                        except Exception:
                            pass
                    # Do we have a better match than the last one?
                    if pos_str >= atl_str:
                        atl_str = pos_str
                        atl_match = pos_atl
            if atl_match is None:
                msg = 'Could not find matching signature.\nPossible matches:'
                for atl in atls:
                    if not isinstance(atl, basestring):
                        atl = ', '.join(atl)
                    msg += '\n  %s' % (map(lambda x: x.strip(), atl.split(','))[1:])
                raise Exception(msg)
            arg_types = atl_match
    except Exception as e:
        logging.warning('*** Could not get signature for %s: %s' % (method, e))
        logging.warning('*** Assuming all parameters are of type \'string\'')
        arg_types = ['string'] * len(args)

    logging.debug('Using signature for %s: %s', method, arg_types)

    call_args = []

    try:
        if len(args) != len(arg_types):
            raise Exception('%s expects %d arguments' % (method, len(arg_types)))
        if len(arg_types) > 0:
            logging.debug('Converting command line args to call args')
            for i in range(0, len(args)):
                cvt_in = args[i]
                cvt_to = arg_types[i]
                cvt_out = convert_arg_to(cvt_in, cvt_to)
                call_args.append(cvt_out)
    except Exception as e:
        logging.error('*** Error converting argument: %s', e)
        return -1

    return call_args

def login(server='127.0.0.1',
          httpVerbose=False,
          login_user='admin',
          login_pass='',
          do_login=True,
          simple_proxy=False,
          apis=None,
          print_format=PrintFormat.PLAIN,
          do_cert_checks=True
          ):

    logging.debug('Connecting to %s' % server)

    if server in ['127.0.0.1', 'localhost']:
        # No need to login or to verify the certificate when we're talking to localhost
        do_login = False
        do_cert_checks = False

    try:
        if simple_proxy:
            uri = 'http://%s' % server
            logging.debug('Server URI: %s' % uri)
            s = xmlrpclib.ServerProxy(uri)
        else:
            uri = 'https://%s/python/rpc2.py' % server
            logging.debug('Server URI: %s' % uri)
            if do_login:
                client_cookie = None
            else:
                client_cookie = "PHPSESSID=none"
            s = getXmlrpcClient(uri, client_cookie, httpVerbose, do_cert_checks)
    except Exception as e:
        logging.error('*** Could not get xmlrpc connection to %s: %s', server, e)
        return -1

    if do_login:
        logging.debug('Logging in as %s' % login_user)
        res = None
        try:
            u = base64.encodestring(login_user)
            p = base64.encodestring(login_pass)
            res = s.system.login(u, p)
        except ValueError as e:
            logging.error('*** system.login exception: SSL certificate validation failed: %s', e)
            logging.error('***     Use the --ssl-help option for additional instructions')
            return -1
        except ssl.SSLError as e:
            logging.error('*** system.login exception: SSL certificate validation failed: %s', e)
            logging.error('***     Use the --ssl-help option for additional instructions')
            return -1
        except Exception as e:
            logging.error('*** system.login exception: %s', e)
            return -1
        if res != 'success':
            print_result(print_format, res)
            return -1

    if httpVerbose:
        print

    if apis:
        enableAPI_name = 'system.enableAPI'
        enableAPI_func = None
        try:
            enableAPI_func = getattr(s, enableAPI_name)
        except Exception as e:
            logging.error('*** Could not find %s: %s' % (enableAPI_name, e))
            return -1
        for api in apis:
            logging.info("Enabling requested API: %s", api)
            try:
                enableAPI_args = [api]
                logging.debug('Calling %s(%s)' % (enableAPI_name, ','.join(enableAPI_args)))
                res = enableAPI_func(*enableAPI_args)
                if httpVerbose:
                    print
            except Exception as e:
                logging.error('*** Call to %s failed: %s' % (enableAPI_name, e))
                return -1

    return s

def call(s, args, keytab_path=None, pem_path=None, httpVerbose=False):
    method = args[0]
    args = args[1:]
    func = None

    global ErrorString
    ErrorString = None

    if method == 'nfs.uploadKeytab' and keytab_path:
        res = None
        if not args:
            # this must be a cluster keytab upload, add an empty string
            args.append("")
        try:
            local_keytab = open(keytab_path, "rb")
            encoded = base64.encodestring(local_keytab.read())
            # put the blob in its place in the argument list
            # note:  this assumes that the blob will remain at the end of the list
            args.append(encoded)
        except Exception as e:
            logging.error('*** keytab upload exception: %s' % e)
            raise e

    if pem_path and method in RPC_CERT_FILE_ARG:
        with open(pem_path, "r") as pem_file:
            pem_text = pem_file.read()
            # don't need this: pem_encoded = base64.encodestring(pem_file.read())
        idx = RPC_CERT_FILE_ARG[method]
        if isinstance(idx, int):
            args.insert(idx, pem_text)
        elif isinstance(idx, str):
            d = ast.literal_eval(args[0])
            d[idx] = pem_text
            args[0] = str(d)

    logging.debug('Looking up %s' % method)

    try:
        func = getattr(s, method)
    except Exception as e:
        logging.error('*** Could not find %s: %s' % (method, e))
        raise e

    call_args = validate_arguments(s, method, args)
    if httpVerbose:
        print
    assert call_args != -1, 'Invalid call arguments'
# python error when args includes a dict
#    logging.debug('Calling %s(%s)' % (method, ','.join(str(args))))

    res = None

    try:
        res = func(*call_args)
        if httpVerbose:
            print
    except Exception as e:
        logging.error('*** Call to %s failed: %s' % (method, e))
        if "not supported" in str(e):
            try:
                check_func = getattr(s, 'system.listMethods')
                check_args = []
                res = check_func(*check_args)
                umethod = method.upper()
                for m in res:
                    if (umethod == m.upper()) and (method != m):
                        logging.error('*** (Did you mean \'%s\' ?)' % m)
                        break
            except Exception:
                pass
        raise e

    logging.debug('')
#    logging.debug('===== %s(%s) RESULTS =====' % (method, ','.join(args)))

    return res

def error_string():
    global ErrorString
    return ErrorString

def setup_logging():

    logging.raiseExceptions = False

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    console = logging.StreamHandler()
    console.setFormatter(logging.Formatter("%(message)s"))
    console.setLevel(logging.INFO)
    logger.addHandler(console)

    recorder = LogRecorderHandler()
    recorder.setLevel(logging.ERROR)
    logger.addHandler(recorder)

    return console


def main():
    server          = None
    method          = None
    func            = None
    logLevel        = logging.INFO
    httpVerbose     = False
    print_format    = PrintFormat.PLAIN
    login_user      = 'admin'
    login_pass      = ''
    do_login        = True
    simple_proxy    = False
    apis            = None
    keytab_path     = None
    do_cert_checks  = True
    pem_path        = None

    console = setup_logging()

    try:
        opts,args = getopt.getopt(sys.argv[1:],"",[
            'help', 'methods', 'modules', 'server=',
            'user=', 'password=', 'nologin', 'simple-proxy', 'apis=',
            'verbose', 'http-verbose', 'quiet', 'quieter', 'raw', 'pretty',
            'upload_keytab=', 'upload_pem=', 'prompt',
            'no-check-certificate', 'ssl-help'])
    except getopt.GetoptError as err:
        logging.error('*** %s', err)
        usage()
        return -1

    # Allow the user to specify --help anywhere in the command
    # line, including as part of the args

    if '--help' in args:
        args.remove('--help')
        opts.insert(0, ('--help', ''))

    for opt,arg in opts:
        if opt in ('--help'):
            if len(args) > 0:
                args = ['system.methodHelp', args[0]]
            else:
                usage()
                return 0
        elif opt in ('--methods'):
            args.insert(0, 'system.listMethods')
        elif opt in ('--modules'):
            args.insert(0, 'system.listModules')
        elif opt in ('--server'):
            server = arg
        elif opt in ('--user'):
            login_user = arg
        elif opt in ('--password'):
            login_pass = arg
        elif opt in ('--prompt'):
            login_pass = None
        elif opt in ('--nologin'):
            do_login = False
        elif opt in ('--simple-proxy'):
            simple_proxy = True
            do_login = False
        elif opt in ('--apis'):
            apis = arg.split(',')
        elif opt in ('--verbose'):
            logLevel = logging.DEBUG
        elif opt in ('--http-verbose'):
            httpVerbose = True
        elif opt in ('--quiet'):
            logLevel = logging.WARNING
            httpVerbose = False
        elif opt in ('--quieter'):
            logLevel = logging.FATAL
            httpVerbose = False
        elif opt in ('--raw'):
            print_format = PrintFormat.RAW
        elif opt in ('--pretty'):
            print_format = PrintFormat.PRETTY
        elif opt in ('--upload_keytab'):
            keytab_path = arg
        elif opt in ('--no-check-certificate'):
            do_cert_checks = False
        elif opt in ('--upload_pem'):
            pem_path = arg
        elif opt in ('--ssl-help'):
            ssl_usage()
            return 0
        else:
            logging.error('*** Unhandled option: %s' % opt)
            usage()
            return -1

    if login_pass is None:
        import getpass
        login_pass = getpass.getpass()

    console.setLevel(logLevel)

    if server is None:
        if 'XMLRPC_SERVER' in os.environ:
            server = os.environ['XMLRPC_SERVER']
            logging.debug('Using server value of %s from XMLRPC_SERVER' % server)

    if server is None:
        #If no environment is sent and no server is specified, use localhost and don't login
        #This is for running xmlrpc.py on a node
        logging.debug('No server specified, using --server 127.0.0.1 --nologin --no-check-certificate')
        server = "127.0.0.1"
        do_login = False
        do_cert_checks = False

    if len(args) < 1:
        logging.error('*** No method supplied')
        usage()
        return -1

    s = login(server, httpVerbose, login_user, login_pass, do_login, simple_proxy, apis,
              print_format=print_format,
              do_cert_checks=do_cert_checks)
    if isinstance(s, int):
        # We got an integer back which likely means that login failed but in any case we're unlikely to have any
        # luck calling a method on an int.....
        logging.debug("Login failed.")
        return s

    try:
        logging.debug("Calling %s(%s), keytab_path=%s, pem_path=%s", s, args, keytab_path, pem_path)
        res = call(s, args, keytab_path, pem_path, httpVerbose=httpVerbose)
        print_result(print_format, res)
        return 0
    except Exception as e:
        logging.debug("XMLRPC call failed: %s", e)
        return -1

if __name__ == "__main__":
    sys.exit(main())