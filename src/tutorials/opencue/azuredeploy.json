{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "databaseServerSku": {
      "type": "string",
      "defaultValue": "GP_Gen5_8",
      "metadata": {
        "description": "Resource allocation for the application database server."
      }
    },
    "databaseServerName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 63,
      "metadata": {
        "description": "Name must be between 3 and 63 characters (alphanumeric and hyphen)."
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "opencue",
      "minLength": 3,
      "maxLength": 63,
      "metadata": {
        "description": "Name must be between 3 and 63 characters (alphanumeric and hyphen)."
      }
    },
    "databaseUserName": {
      "type": "string",
      "defaultValue": "cuebot",
      "metadata": {
        "description": "User name for application database login."
      }
    },
    "databaseUserPassword": {
      "type": "string",
      "metadata": {
        "description": "User password for application database login."
      }
    },
    "databaseServerAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for server administrator login."
      }
    },
    "databaseServerAdminPassword": {
      "type": "string",
      "metadata": {
        "description": "User password for server administrator login."
      }
    },
    "imageNameRenderApp": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name must be between 1 and 80 characters (alphanumeric, hyphen, underscore and period)."
      }
    },
    "imageNameRenderNode": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name must be between 1 and 80 characters (alphanumeric, hyphen, underscore and period)."
      }
    },
    "imageServerAdminPassword": {
      "type": "string",
      "metadata": {
        "description": "User password for server administrator login."
      }
    },
    "imageGalleryName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name must be between 1 and 64 characters (alphanumeric, underscore and period)."
      }
    }
  },
  "variables": {
    "databaseApiVersion": "2017-12-01",
    "databaseServerName": "[toLower(parameters('databaseServerName'))]",
    "databaseName": "[toLower(parameters('databaseName'))]",
    "databaseUser": "[concat(parameters('databaseUserName'), '@', variables('databaseServerName'))]",
    "databaseHost": "[concat(variables('databaseServerName'), '.postgres.database.azure.com')]",
    "databaseHostUrl": "[concat('jdbc:postgresql://', variables('databaseHost'), ':5432/', variables('databaseName'), '?sslmode=require')]",
    "databaseConnection": "[concat('host=', variables('databaseHost'), ' port=5432 user=', variables('databaseUser'), ' password=', parameters('databaseUserPassword'), ' dbname=', variables('databaseName'))]",
    "databaseServerConnection": "[concat('host=', variables('databaseHost'), ' port=5432 user=', parameters('databaseServerAdminUsername'), '@', variables('databaseServerName'), ' password=', parameters('databaseServerAdminPassword'), ' dbname=postgres')]",
    "databaseServerCreateDatabase": "[concat('CREATE DATABASE ', variables('databaseName'))]",
    "databaseServerCreateUser": "[concat('CREATE ROLE ', parameters('databaseUserName'), ' WITH LOGIN PASSWORD ', variables('singleQuote'), parameters('databaseUserPassword'), variables('singleQuote'))]",
    "databaseServerAuthorizeUser": "[concat('GRANT ALL PRIVILEGES ON DATABASE ', variables('databaseName'), ' TO ', parameters('databaseUserName'))]",
    "imageGalleryApiVersion": "2019-03-01",
    "imageDefinitionName": "OpenCue",
    "imagePublisher": "OpenLogic",
    "imageOffer": "CentOS",
    "imageSku": "7.6",
    "imageVersion": "7.6.20190708",
    "imageBuilderApiVersion": "2019-05-01-preview",
    "imageSolutionDirectory": "/bin/opencue",
    "imageSudoCommand": "[concat('echo \"', parameters('imageServerAdminPassword'), '\" | sudo --stdin ')]",
    "imageBaselineCommands": [
      "[concat(variables('imageSudoCommand'), 'yum -y update')]",
      "[concat('mkdir ', variables('imageSolutionDirectory'))]"
    ],
    "cueReleaseVersion": "0.2.31",
    "cueReleaseUrl": "[concat('https://github.com/AcademySoftwareFoundation/OpenCue/releases/download/v', variables('cueReleaseVersion'))]",
    "cueGitHubUrl": "https://raw.githubusercontent.com/Azure/Avere/master/src/tutorials/opencue",
    "singleQuote": "'"
  },
  "resources": [
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "[variables('databaseApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('databaseServerName')]",
      "properties": {
        "administratorLogin": "[parameters('databaseServerAdminUsername')]",
        "administratorLoginPassword": "[parameters('databaseServerAdminPassword')]",
        "version": "11"
      },
      "sku": {
        "name": "[parameters('databaseServerSku')]"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers/firewallRules",
      "apiVersion": "[variables('databaseApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('databaseServerName'), '/AllowAllWindowsAzureIps')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "type": "Microsoft.Compute/galleries",
      "apiVersion": "[variables('imageGalleryApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('imageGalleryName')]"
    },
    {
      "type": "Microsoft.Compute/galleries/images",
      "apiVersion": "[variables('imageGalleryApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('imageGalleryName'), '/', variables('imageDefinitionName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/galleries', parameters('imageGalleryName'))]"
      ],
      "properties": {
        "osType": "Linux",
        "identifier": {
          "publisher": "[variables('imagePublisher')]",
          "offer": "[variables('imageOffer')]",
          "sku": "[variables('imageSku')]"
        }
      }
    },
    {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "[variables('imageBuilderApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('imageNameRenderApp')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers/firewallRules', variables('databaseServerName'), 'AllowAllWindowsAzureIps')]",
        "[resourceId('Microsoft.Compute/galleries/images', parameters('imageGalleryName'), variables('imageDefinitionName'))]"
      ],
      "properties": {
        "buildTimeoutInMinutes": 30,
        "source": {
          "type": "PlatformImage",
          "publisher": "[variables('imagePublisher')]",
          "offer": "[variables('imageOffer')]",
          "sku": "[variables('imageSku')]",
          "version": "[variables('imageVersion')]"
        },
        "customize": [
          {
            "type": "Shell",
            "inline": "[variables('imageBaselineCommands')]"
          },
          {
            "type": "Shell",
            "inline": [
              "[concat('cd ', variables('imageSolutionDirectory'))]",
              "[concat('wget ', variables('cueReleaseUrl'), '/schema-', variables('cueReleaseVersion'), '.sql')]",
              "[concat('wget ', variables('cueReleaseUrl'), '/demo_data-', variables('cueReleaseVersion'), '.sql')]",
              "[concat('wget ', variables('cueReleaseUrl'), '/cuebot-', variables('cueReleaseVersion'), '-all.jar')]",
              "[concat(variables('imageSudoCommand'), 'yum -y install postgresql-contrib')]",
              "[concat('psql \"', variables('databaseServerConnection'), '\" --command=\"', variables('databaseServerCreateDatabase'), '\"')]",
              "[concat('psql \"', variables('databaseServerConnection'), '\" --command=\"', variables('databaseServerCreateUser'), '\"')]",
              "[concat('psql \"', variables('databaseServerConnection'), '\" --command=\"', variables('databaseServerAuthorizeUser'), '\"')]",
              "[concat('psql \"', variables('databaseConnection'), '\" < schema-', variables('cueReleaseVersion'), '.sql')]",
              "[concat('psql \"', variables('databaseConnection'), '\" < demo_data-', variables('cueReleaseVersion'), '.sql')]",
              "[concat(variables('imageSudoCommand'), 'yum -y install java-1.8.0-openjdk')]",
              "[concat(variables('imageSudoCommand'), 'groupadd -r opencue')]",
              "[concat(variables('imageSudoCommand'), 'useradd -r -s /bin/false -g opencue cuebot')]",
              "cd /etc/systemd/system",
              "[concat('wget ', variables('cueGitHubUrl'), '/opencue-bot.service')]",
              "[concat('sed -i ', variables('singleQuote'), 's|JAR_FILE|', variables('imageSolutionDirectory'), '/cuebot-', variables('cueReleaseVersion'), '-all.jar|', variables('singleQuote'), ' opencue-bot.service')]",
              "[concat('sed -i ', variables('singleQuote'), 's|DB_URL|', variables('databaseHostUrl'), '|', variables('singleQuote'), ' opencue-bot.service')]",
              "[concat('sed -i ', variables('singleQuote'), 's|DB_USER|', variables('databaseUser'), '|', variables('singleQuote'), ' opencue-bot.service')]",
              "[concat('sed -i ', variables('singleQuote'), 's|DB_PASSWORD|', parameters('databaseUserPassword'), '|', variables('singleQuote'), ' opencue-bot.service')]",
              "[concat(variables('imageSudoCommand'), 'systemctl daemon-reload')]",
              "[concat(variables('imageSudoCommand'), 'systemctl enable opencue-bot')]",
              "[concat(variables('imageSudoCommand'), 'systemctl start opencue-bot')]"
            ]
          }
        ],
        "distribute": [
          {
            "type": "ManagedImage",
            "runOutputName": "[concat(parameters('imageNameRenderApp'), '-ManagedImage')]",
            "imageId": "[resourceId('Microsoft.Compute/images', parameters('imageNameRenderApp'))]",
            "location": "[resourceGroup().location]"
          },
          {
            "type": "SharedImage",
            "runOutputName": "[concat(parameters('imageNameRenderApp'), '-SharedImage')]",
            "galleryImageId": "[resourceId('Microsoft.Compute/galleries/images', parameters('imageGalleryName'), variables('imageDefinitionName'))]",
            "replicationRegions": [
              "[resourceGroup().location]"
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "[variables('imageBuilderApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('imageNameRenderNode')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/galleries/images', parameters('imageGalleryName'), variables('imageDefinitionName'))]"
      ],
      "properties": {
        "buildTimeoutInMinutes": 30,
        "source": {
          "type": "PlatformImage",
          "publisher": "[variables('imagePublisher')]",
          "offer": "[variables('imageOffer')]",
          "sku": "[variables('imageSku')]",
          "version": "[variables('imageVersion')]"
        },
        "customize": [
          {
            "type": "Shell",
            "inline": "[variables('imageBaselineCommands')]"
          },
          {
            "type": "Shell",
            "inline": [
              "[concat(variables('imageSudoCommand'), 'yum -y install gcc')]",
              "[concat(variables('imageSudoCommand'), 'yum -y install epel-release')]",
              "[concat(variables('imageSudoCommand'), 'yum -y install python-devel')]",
              "[concat(variables('imageSudoCommand'), 'yum -y install python-pip')]",
              "[concat(variables('imageSudoCommand'), 'pip install --upgrade pip')]",
              "[concat(variables('imageSudoCommand'), 'pip install pipenv')]",
              "[concat('cd ', variables('imageSolutionDirectory'))]",
              "[concat('wget ', variables('cueReleaseUrl'), '/rqd-', variables('cueReleaseVersion'), '-all.tar.gz')]",
              "[concat('tar -xzf rqd-', variables('cueReleaseVersion'), '-all.tar.gz')]",
              "[concat('cd rqd-', variables('cueReleaseVersion'), '-all')]",
              "[concat(variables('imageSudoCommand'), 'pipenv install')]",
              "[concat(variables('imageSudoCommand'), 'pipenv run python setup.py install')]"
            ]
          },
          {
            "type": "Shell",
            "inline": [
              "[concat(variables('imageSudoCommand'), 'yum -y install nfs-utils')]"
            ]
          }
        ],
        "distribute": [
          {
            "type": "ManagedImage",
            "runOutputName": "[concat(parameters('imageNameRenderNode'), '-ManagedImage')]",
            "imageId": "[resourceId('Microsoft.Compute/images', parameters('imageNameRenderNode'))]",
            "location": "[resourceGroup().location]"
          },
          {
            "type": "SharedImage",
            "runOutputName": "[concat(parameters('imageNameRenderNode'), '-SharedImage')]",
            "galleryImageId": "[resourceId('Microsoft.Compute/galleries/images', parameters('imageGalleryName'), variables('imageDefinitionName'))]",
            "replicationRegions": [
              "[resourceGroup().location]"
            ]
          }
        ]
      }
    }
  ],
  "outputs": {
    "databaseHostUrl": {
      "type": "string",
      "value": "[variables('databaseHostUrl')]"
    },
    "databaseUser": {
      "type": "string",
      "value": "[variables('databaseUser')]"
    },
    "databasePassword": {
      "type": "string",
      "value": "[parameters('databaseUserPassword')]"
    }
  }
}