pipeline {
  agent any
  parameters {
    string(name: 'GITHUB_APP_CREDENTIAL_ID', defaultValue: 'GitHubAppKey')
    string(name: 'GITHUB_APP_TOKEN_SECONDS', defaultValue: '300')
    string(name: 'GITHUB_API_HEADER_ACCEPT_AUTH', defaultValue: 'application/vnd.github.machine-man-preview+json')
    string(name: 'GITHUB_API_HEADER_ACCEPT_CHECK', defaultValue: 'application/vnd.github.antiope-preview+json')
    string(name: 'TF_BACKEND_CONFIG_FILE', defaultValue: '/TerraformBackend.config')
    string(name: 'TF_APPLY_PIPELINE_NAME', defaultValue: 'Terraform-Apply')
    string(name: 'TF_PLAN_FILE_NAME', defaultValue: 'tfPlan.bin')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true)
    string(name: 'ARM_TENANT_ID', defaultValue: '72f988bf-86f1-41af-91ab-2d7cd011db47')
    string(name: 'ARM_SUBSCRIPTION_ID', defaultValue: '3d07cfbc-17aa-41b4-baa1-488fef85a1d3')
    booleanParam(name: 'ARM_USE_MSI', defaultValue: true)
  }
  options {
    copyArtifactPermission params.TF_APPLY_PIPELINE_NAME
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'GITHUB_EVENT_ACTION', value: '$.action'],
        [key: 'GITHUB_APP_INSTALLATION_ID', value: '$.installation.id'],
        [key: 'GITHUB_PULL_REQUEST_NUMBER', value: '$.pull_request.number'],
        [key: 'GITHUB_PULL_REQUEST_HEAD_HASH', value: '$.pull_request.head.sha'],
        [key: 'GITHUB_CHECK_RUN_NUMBER', value: '$.check_run.pull_requests[0].number'],
        [key: 'GITHUB_CHECK_RUN_HEAD_HASH', value: '$.check_run.head_sha'],
        [key: 'GITHUB_REPOSITORY_URL', value: '$.repository.url'],
        [key: 'GITHUB_REPOSITORY_NAME', value: '$.repository.full_name'],
        [key: 'GITHUB_REPOSITORY_HOST', value: '$.repository.url', regexpFilter: '(/repos)(.*)']
      ],
      causeString: '$x_github_event $GITHUB_EVENT_ACTION in repository $GITHUB_REPOSITORY_NAME',
      regexpFilterExpression: '(pull_request).(opened|reopened|synchronize)|(check_run).(rerequested)',
      regexpFilterText: '$x_github_event.$GITHUB_EVENT_ACTION'
    )
  }
  environment {
    GITHUB_PULL_REQUEST_NUMBER = "${x_github_event == 'check_run' ? "$GITHUB_CHECK_RUN_NUMBER" : "$GITHUB_PULL_REQUEST_NUMBER"}"
    GITHUB_PULL_REQUEST_HEAD_HASH = "${x_github_event == 'check_run' ? "$GITHUB_CHECK_RUN_HEAD_HASH" : "$GITHUB_PULL_REQUEST_HEAD_HASH"}"
  }
  stages {
    stage('GitHub App Auth Token') {
      when {
        expression {
          GITHUB_PULL_REQUEST_NUMBER.isInteger()
        }
      }
      environment {
        GITHUB_APP_KEY_FILE = credentials("$GITHUB_APP_CREDENTIAL_ID")
        GITHUB_APP_WEB_TOKEN = sh(script: "python3 $WORKSPACE/GetWebToken.py $GITHUB_APP_KEY_FILE_USR $GITHUB_APP_KEY_FILE $GITHUB_APP_TOKEN_SECONDS 'RS256'", returnStdout: true)
      }
      steps {
        sh script: '''#!/bin/bash -ex
          git clean -dff
        '''
        script {
          def appInstallationAccessResponse = httpRequest url: "$GITHUB_REPOSITORY_HOST/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_AUTH"], [name: 'Authorization', value: "Bearer $GITHUB_APP_WEB_TOKEN"]]
          def appInstallationAccess = readJSON text: appInstallationAccessResponse.content
          writeFile file: 'appInstallationToken.txt', text: appInstallationAccess.token
        }
      }
    }
    stage('GitHub App Pull Request') {
      when {
        expression {
          fileExists('appInstallationToken.txt')
        }
      }
      steps {
        script {
          def tfFileChanged = false
          def appInstallationToken = readFile file: 'appInstallationToken.txt'
          def pullRequestFilesResponse = httpRequest url: "$GITHUB_REPOSITORY_URL/pulls/$GITHUB_PULL_REQUEST_NUMBER/files", httpMode: 'GET', acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: "token $appInstallationToken"]]
          def pullRequestFiles = readJSON text: pullRequestFilesResponse.content
          for (def pullRequestFile in pullRequestFiles) {
            if (pullRequestFile.filename.endsWith('.tf')) {
              def tfFilePath = pullRequestFile.filename
              def tfLastSlashIndex = tfFilePath.lastIndexOf('/')
              def tfFileDirectory = tfFilePath.substring(0, tfLastSlashIndex)
              writeFile file: 'tfFileDirectory.txt', text: tfFileDirectory
              writeFile file: 'tfFilePath.txt', text: tfFilePath
              tfFileFound = true
              break
            }
          }
          if (tfFileFound) {
            def pullRequestResponse = httpRequest url: "$GITHUB_REPOSITORY_URL/pulls/$GITHUB_PULL_REQUEST_NUMBER", httpMode: 'GET', acceptType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: "token $appInstallationToken"]]
            def pullRequest = readJSON text: pullRequestResponse.content
            def pullRequestTitle = pullRequest.title
            def buildNumberSuffix = " (Build "
            def buildNumberIndex = pullRequestTitle.indexOf(buildNumberSuffix)
            if (buildNumberIndex > -1) {
              pullRequestTitle = pullRequestTitle.substring(0, buildNumberIndex)
            }
            pullRequestTitle += "$buildNumberSuffix$currentBuild.number)"
            httpRequest url: "$GITHUB_REPOSITORY_URL/pulls/$GITHUB_PULL_REQUEST_NUMBER", httpMode: 'PATCH', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"title\":\"$pullRequestTitle\"}"
          }
        }
      }
    }
    stage('Terraform Init') {
      when {
        expression {
          fileExists('tfFilePath.txt')
        }
      }
      steps {
        script {
          def checkRunConclusion
          def checkRunOutputSummary
          def appInstallationToken = readFile file: 'appInstallationToken.txt'
          def checkRunResponse = httpRequest url: "$GITHUB_REPOSITORY_URL/check-runs", httpMode: 'POST', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"Terraform Init\", \"head_sha\":\"$GITHUB_PULL_REQUEST_HEAD_HASH\", \"status\":\"in_progress\"}"
          def checkRun = readJSON text: checkRunResponse.content
          try {
            def exitCode = sh returnStatus: true, script: '''#!/bin/bash -ex
              tfStateFile="$(sed 's|/|-|g' tfFilePath.txt)state"
              cd $(cat tfFileDirectory.txt)
              echo 'terraform {' > backend.tf
              echo 'backend "azurerm" {}' >> backend.tf
              echo '}' >> backend.tf
              terraform init -input=false -backend-config="$WORKSPACE$TF_BACKEND_CONFIG_FILE" -backend-config="key=$tfStateFile" -no-color &> tfInit.txt
            '''
            def tfFileDirectory = readFile file: 'tfFileDirectory.txt'
            dir(tfFileDirectory) {
              def tfInit = readFile file: 'tfInit.txt'
              tfInit = tfInit.replaceAll('"', "'")
              tfInit = tfInit.replaceAll('\n', '<br>')
              checkRunOutputSummary = tfInit
            }
            if (exitCode != 0) {
              checkRunConclusion = 'failure'
              error message: checkRunOutputSummary
            } else {
              checkRunConclusion = 'success'
            }
          }
          catch (exception) {
            checkRunOutputSummary = exception
            checkRunConclusion = 'failure'
            throw exception
          }
          finally {
            def tfFilePath = readFile file: 'tfFilePath.txt'
            def checkRunName = "Terraform Init"
            def checkRunOutputTitle = "$checkRunName ($tfFilePath)"
            httpRequest url: "$GITHUB_REPOSITORY_URL/check-runs/$checkRun.id", httpMode: 'PATCH', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"$checkRunName\", \"conclusion\":\"$checkRunConclusion\", \"output\":{\"title\":\"$checkRunOutputTitle\", \"summary\":\"$checkRunOutputSummary\"}}"
          }
        }
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('tfFilePath.txt')
        }
      }
      steps {
        script {
          def checkRunConclusion
          def checkRunOutputSummary
          def appInstallationToken = readFile file: 'appInstallationToken.txt'
          def checkRunResponse = httpRequest url: "$GITHUB_REPOSITORY_URL/check-runs", httpMode: 'POST', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"Terraform Init\", \"head_sha\":\"$GITHUB_PULL_REQUEST_HEAD_HASH\", \"status\":\"in_progress\"}"
          def checkRun = readJSON text: checkRunResponse.content
          try {
            def exitCode = sh returnStatus: true, script: '''#!/bin/bash -ex
              cd $(cat tfFileDirectory.txt)
              terraform plan -input=false -out="$TF_PLAN_FILE_NAME" -no-color &> tfPlan.txt
            '''
            def tfFileDirectory = readFile file: 'tfFileDirectory.txt'
            dir(tfFileDirectory) {
              def tfPlan = readFile file: 'tfPlan.txt'
              tfPlan = tfPlan.replaceAll('"', "'")
              tfPlan = tfPlan.replaceAll('\n', '<br>')
              checkRunOutputSummary = tfPlan
            }
            if (exitCode != 0) {
              checkRunConclusion = 'failure'
              error message: checkRunOutputSummary
            } else {
              checkRunConclusion = 'success'
            }
          }
          catch (exception) {
            checkRunOutputSummary = exception
            checkRunConclusion = 'failure'
            throw exception
          }
          finally {
            def tfFilePath = readFile file: 'tfFilePath.txt'
            def checkRunName = "Terraform Plan"
            def checkRunOutputTitle = "$checkRunName ($tfFilePath)"
            httpRequest url: "$GITHUB_REPOSITORY_URL/check-runs/$checkRun.id", httpMode: 'PATCH', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"$checkRunName\", \"conclusion\":\"$checkRunConclusion\", \"output\":{\"title\":\"$checkRunOutputTitle\", \"summary\":\"$checkRunOutputSummary\"}}"
          }
        }
      }
    }
    stage('Build Artifacts') {
      when {
        expression {
          fileExists('tfFileDirectory.txt')
        }
        expression {
          dir(readFile('tfFileDirectory.txt')) {
            fileExists("$TF_PLAN_FILE_NAME")
          }
        }
      }
      steps {
        dir(readFile('tfFileDirectory.txt')) {
          archiveArtifacts artifacts: '**'
        }
      }
    }
  }
  post {
    always {
      sh script: '''#!/bin/bash -ex
        git clean -dff
      '''
    }
  }
}
