pipeline {
  agent any
  parameters {
    string(name: 'GITHUB_APP_CREDENTIAL_ID', defaultValue: 'GitHubAppKey')
    string(name: 'GITHUB_APP_TOKEN_SECONDS', defaultValue: '300')
    string(name: 'GITHUB_API_HEADER_ACCEPT_AUTH', defaultValue: 'application/vnd.github.machine-man-preview+json')
    string(name: 'GITHUB_API_HEADER_ACCEPT_CHECK', defaultValue: 'application/vnd.github.antiope-preview+json')
    string(name: 'TF_BACKEND_CONFIG_FILE', defaultValue: '/TerraformBackend.config')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true)
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'GITHUB_EVENT_ACTION', value: '$.action'],
        [key: 'GITHUB_APP_INSTALLATION_ID', value: '$.installation.id'],
        [key: 'GITHUB_PULL_REQUEST_HASH', value: '$.pull_request.head.sha'],
        [key: 'GITHUB_PULL_REQUEST_REPOSITORY_URL', value: '$.pull_request.head.repo.url'],
        [key: 'GITHUB_PULL_REQUEST_REPOSITORY_HOST', value: '$.pull_request.head.repo.url', regexpFilter: '(/repos)(.*)'],
        [key: 'GITHUB_CHECK_RUN_HASH', value: '$.check_run.head_sha'],
        [key: 'GITHUB_CHECK_RUN_REPOSITORY_URL', value: '$.repository.url'],
        [key: 'GITHUB_CHECK_RUN_REPOSITORY_HOST', value: '$.repository.url', regexpFilter: '(/repos)(.*)']
      ],
      causeString: 'GitHub $x_github_event $GITHUB_EVENT_ACTION on app installation $GITHUB_APP_INSTALLATION_ID',
      regexpFilterExpression: '(pull_request).(opened|reopened|synchronize)|(check_run).(rerequested)',
      regexpFilterText: '$x_github_event.$GITHUB_EVENT_ACTION'
    )
  }
  environment {
    GITHUB_PULL_REQUEST_HASH = sh(script: "if [ $x_github_event = 'check_run' ]; then echo -n \"$GITHUB_CHECK_RUN_HASH\"; else echo -n \"$GITHUB_PULL_REQUEST_HASH\"; fi", returnStdout: true)
    GITHUB_PULL_REQUEST_REPOSITORY_URL = sh(script: "if [ $x_github_event = 'check_run' ]; then echo -n \"$GITHUB_CHECK_RUN_REPOSITORY_URL\"; else echo -n \"$GITHUB_PULL_REQUEST_REPOSITORY_URL\"; fi", returnStdout: true)
    GITHUB_PULL_REQUEST_REPOSITORY_HOST = sh(script: "if [ $x_github_event = 'check_run' ]; then echo -n \"$GITHUB_CHECK_RUN_REPOSITORY_HOST\"; else echo -n \"$GITHUB_PULL_REQUEST_REPOSITORY_HOST\"; fi", returnStdout: true)
  }
  stages {
    stage('GitHub Pull Request') {
      steps {
        sh '''#!/bin/bash -ex
          git clean -dff
          for changedFile in $(git diff --name-only $GIT_COMMIT $GITHUB_PULL_REQUEST_HASH)
          do
            if [ ${changedFile: -3} = ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFileDirectory.txt
              echo -n "$changedFile" > tfFilePath.txt
              break
            fi
          done
        '''
      }
    }
    stage('GitHub App Token') {
      when {
        expression {
          fileExists('tfFilePath.txt')
        }
      }
      environment {
        GITHUB_APP_KEY_FILE = credentials("$GITHUB_APP_CREDENTIAL_ID")
        GITHUB_APP_WEB_TOKEN = sh(script: "python3 $WORKSPACE/GetWebToken.py $GITHUB_APP_KEY_FILE_USR $GITHUB_APP_KEY_FILE $GITHUB_APP_TOKEN_SECONDS 'RS256'", returnStdout: true)
      }
      steps {
        script {
          def appInstallationAccessResponse = httpRequest url: "$GITHUB_PULL_REQUEST_REPOSITORY_HOST/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_AUTH"], [name: 'Authorization', value: "Bearer $GITHUB_APP_WEB_TOKEN"]]
          def appInstallationAccess = readJSON text: appInstallationAccessResponse.content
          writeFile file: 'appInstallationToken.txt', text: appInstallationAccess.token
        }
      }
    }
    stage('Terraform Init') {
      when {
        expression {
          fileExists('appInstallationToken.txt')
        }
      }
      steps {
        script {
          def checkRunConclusion
          def checkRunOutputSummary
          def appInstallationToken = readFile file: 'appInstallationToken.txt'
          def checkRunResponse = httpRequest url: "$GITHUB_PULL_REQUEST_REPOSITORY_URL/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"Terraform Init\", \"head_sha\":\"$GITHUB_PULL_REQUEST_HASH\", \"status\":\"in_progress\"}"
          def checkRun = readJSON text: checkRunResponse.content
          def checkRunId = checkRun.id
          try {
            sh '''#!/bin/bash -ex
              tfStateFile="$(sed 's|/|-|g' tfFilePath.txt)state"
              cd $(cat tfFileDirectory.txt)
              echo 'terraform {' > backend.tf
              echo 'backend "azurerm" {}' >> backend.tf
              echo '}' >> backend.tf
              terraform init -input=false -backend-config="$WORKSPACE$TF_BACKEND_CONFIG_FILE" -backend-config="key=$tfStateFile" -no-color &> tfInit.txt
            '''
            def tfFileDirectory = readFile file: 'tfFileDirectory.txt'
            dir(tfFileDirectory) {
              def tfInit = readFile file: 'tfInit.txt'
              tfInit = tfInit.replaceAll('"', "'")
              tfInit = tfInit.replaceAll('\n', '<br>')
              checkRunOutputSummary = tfInit
            }
            checkRunConclusion = 'success'
          }
          catch (err) {
            checkRunOutputSummary = err
            checkRunConclusion = 'failure'
            currentBuild.result = 'FAILURE'
          }
          finally {
            def tfFilePath = readFile file: 'tfFilePath.txt'
            def checkRunName = 'Terraform Init'
            def checkRunOutputTitle = "$checkRunName ($tfFilePath)"
            httpRequest url: "$GITHUB_PULL_REQUEST_REPOSITORY_URL/check-runs/$checkRunId", httpMode: 'PATCH', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"$checkRunName\", \"conclusion\":\"$checkRunConclusion\", \"output\":{\"title\":\"$checkRunOutputTitle\", \"summary\":\"$checkRunOutputSummary\"}}"
          }
        }
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('appInstallationToken.txt')
        }
      }
      steps {
        script {
          def checkRunConclusion
          def checkRunOutputSummary
          def appInstallationToken = readFile file: 'appInstallationToken.txt'
          def checkRunResponse = httpRequest url: "$GITHUB_PULL_REQUEST_REPOSITORY_URL/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"Terraform Init\", \"head_sha\":\"$GITHUB_PULL_REQUEST_HASH\", \"status\":\"in_progress\"}"
          def checkRun = readJSON text: checkRunResponse.content
          def checkRunId = checkRun.id
          try {
            sh '''#!/bin/bash -ex
              cd $(cat tfFileDirectory.txt)
              terraform plan -input=false -out=tfPlan.bin -no-color &> tfPlan.txt
            '''
            def tfFileDirectory = readFile file: 'tfFileDirectory.txt'
            dir(tfFileDirectory) {
              def tfPlan = readFile file: 'tfPlan.txt'
              tfPlan = tfPlan.replaceAll('"', "'")
              tfPlan = tfPlan.replaceAll('\n', '<br>')
              checkRunOutputSummary = tfPlan
            }
            checkRunConclusion = 'success'
          }
          catch (err) {
            checkRunOutputSummary = err
            checkRunConclusion = 'failure'
            currentBuild.result = 'FAILURE'
          }
          finally {
            def tfFilePath = readFile file: 'tfFilePath.txt'
            def checkRunName = 'Terraform Plan'
            def checkRunOutputTitle = "$checkRunName ($tfFilePath)"
            httpRequest url: "$GITHUB_PULL_REQUEST_REPOSITORY_URL/check-runs/$checkRunId", httpMode: 'PATCH', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_CHECK"], [name: 'Authorization', value: "token $appInstallationToken"]], requestBody: "{\"name\":\"$checkRunName\", \"conclusion\":\"$checkRunConclusion\", \"output\":{\"title\":\"$checkRunOutputTitle\", \"summary\":\"$checkRunOutputSummary\"}}"
          }
        }
      }
    }
    stage('Build Artifacts Storage') {
      when {
        expression {
          fileExists('tfFileDirectory.txt')
        }
        expression {
          dir(readFile('tfFileDirectory.txt')) {
            fileExists('tfPlan.bin')
          }
        }
      }
      steps {
        dir(readFile('tfFileDirectory.txt')) {
          archiveArtifacts artifacts: '**'
        }
      }
    }
  }
}
