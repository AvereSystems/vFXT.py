// Jenkins declarative pipeline for Terraform GitOps via GitHub App v3 Pull Requests

pipeline {
  agent any
  parameters {
    string(name: 'GITHUB_APP_KEY_ID', defaultValue: 'GitHubAppKey')
    string(name: 'GITHUB_APP_SECRET_ID', defaultValue: 'GitHubAppSecret')
    string(name: 'GITHUB_APP_AUTH_TOKEN_SECONDS', defaultValue: '600')
    string(name: 'GITHUB_APP_AUTH_TOKEN_GENERATOR', defaultValue: '/GetGitHubWebToken.py')
    string(name: 'GITHUB_API_HEADER_ACCEPT', defaultValue: 'application/vnd.github.v3+json')
    string(name: 'GITHUB_API_HEADER_ACCEPT_AUTH', defaultValue: 'application/vnd.github.machine-man-preview+json')
    string(name: 'GITHUB_API_HEADER_ACCEPT_CHECK', defaultValue: 'application/vnd.github.antiope-preview+json')
    string(name: 'TF_ENVIRONMENT_VARIABLES_CONFIG_FILE', defaultValue: '/AzureEnvironment.Development.Variables.config')
    string(name: 'TF_PLAN_PIPELINE_NAME', defaultValue: 'Terraform Plan')
    string(name: 'TF_PLAN_OUTPUT_FILE', defaultValue: 'tfPlan.bin')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true)
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'GITHUB_EVENT_ACTION', value: '$.action'],
        [key: 'GITHUB_APP_INSTALLATION_ID', value: '$.installation.id'],
        [key: 'GITHUB_REPOSITORY_URL', value: '$.repository.url'],
        [key: 'GITHUB_REPOSITORY_NAME', value: '$.repository.full_name'],
        [key: 'GITHUB_REPOSITORY_HOST', value: '$.repository.url', regexpFilter: '(/repos)(.*)'],
        [key: 'GITHUB_REPOSITORY_CLONE_URL', value: '$.repository.clone_url'],
        [key: 'GITHUB_PULL_REQUEST_TITLE', value: '$.pull_request.title'],
        [key: 'GITHUB_PULL_REQUEST_NUMBER', value: '$.pull_request.number'],
        [key: 'GITHUB_PULL_REQUEST_MERGED', value: '$.pull_request.merged'],
        [key: 'GITHUB_PULL_REQUEST_MERGE_HASH', value: '$.pull_request.merge_commit_sha'],
        [key: 'GITHUB_PULL_REQUEST_COMMENTS_URL', value: '$.pull_request.comments_url'],
        [key: 'GITHUB_PULL_REQUEST_REFERENCE_BASE', value: '$.pull_request.base.ref'],
        [key: 'GITHUB_PULL_REQUEST_REFERENCE_HEAD', value: '$.pull_request.head.ref']
      ],
      regexpFilterExpression: '(pull_request).(closed).(true)',
      regexpFilterText: '$x_github_event.$GITHUB_EVENT_ACTION.$GITHUB_PULL_REQUEST_MERGED',
      causeString: '$x_github_event $GITHUB_PULL_REQUEST_TITLE $GITHUB_EVENT_ACTION (merged: $GITHUB_PULL_REQUEST_MERGED) in repository $GITHUB_REPOSITORY_NAME',
      token: ''
    )
  }
  environment {
    GITHUB_APP_KEY_FILE = credentials("$GITHUB_APP_KEY_ID")
  }
  stages {
    stage('Local Workspace') {
      steps {
        sh script: '''#!/bin/bash
          set -ex
          git clean -dff
        '''
      }
    }
    stage('GitHub App Auth Token') {
      when {
        not {
          environment name: 'GITHUB_PULL_REQUEST_NUMBER', value: null
        }
      }
      steps {
        script {
          def appWebToken = sh returnStdout: true, script: '''#!/bin/bash
            set -ex
            python3 "$WORKSPACE$GITHUB_APP_AUTH_TOKEN_GENERATOR" "$GITHUB_APP_KEY_FILE_USR" "$GITHUB_APP_KEY_FILE" "$GITHUB_APP_AUTH_TOKEN_SECONDS" 'RS256'
          '''
          def appAuthTokenCreate = httpRequest url: "$GITHUB_REPOSITORY_HOST/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT"], [name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_AUTH"], [name: 'Authorization', value: "Bearer $appWebToken"]]
          def appAuthToken = readJSON text: appAuthTokenCreate.content
          env.GITHUB_APP_AUTH_TOKEN = appAuthToken.token
          def gitRemoteAuthDelimiter = '://'
          def gitRemoteAuthUsername = "$GITHUB_APP_INSTALLATION_ID"
          def gitRemoteAuthPassword = appAuthToken.token
          def gitRemoteOriginUrl = "$GITHUB_REPOSITORY_CLONE_URL"
          gitRemoteOriginUrl = gitRemoteOriginUrl.replace(gitRemoteAuthDelimiter, gitRemoteAuthDelimiter + gitRemoteAuthPassword + '@')
          gitRemoteOriginUrl = gitRemoteOriginUrl.replace(gitRemoteAuthDelimiter, gitRemoteAuthDelimiter + gitRemoteAuthUsername + ':')
          env.GITHUB_REMOTE_ORIGIN_URL = gitRemoteOriginUrl
        }
      }
    }
    stage('Build Artifacts') {
      when {
        not {
          environment name: 'GITHUB_APP_AUTH_TOKEN', value: null
        }
      }
      steps {
        script {
          def pullRequestTitle = "$GITHUB_PULL_REQUEST_TITLE"
          def buildNumberPrefix = ' Build '
          def buildNumberIndexStart = pullRequestTitle.indexOf(buildNumberPrefix)
          if (buildNumberIndexStart > 1) {
            buildNumberIndexStart += buildNumberPrefix.length()
            def buildNumberIndexEnd = pullRequestTitle.indexOf(')', buildNumberIndexStart)
            def tfPlanBuildNumber = pullRequestTitle.substring(buildNumberIndexStart, buildNumberIndexEnd)
            copyArtifacts projectName: "$TF_PLAN_PIPELINE_NAME", selector: specific(tfPlanBuildNumber)
          }
        }
      }
    }
    stage('Terraform Apply') {
      when {
        expression {
          fileExists(params.TF_PLAN_OUTPUT_FILE)
        }
      }      
      steps {
        script {
          def exitCode = sh returnStatus: true, script: '''#!/bin/bash
            set -ex
            while IFS=$'\n\r' read environmentVariable
            do
              export "$environmentVariable"
            done < "$WORKSPACE$TF_ENVIRONMENT_VARIABLES_CONFIG_FILE"
            terraform apply -lock=true -input=false -no-color "$TF_PLAN_OUTPUT_FILE" &> tfApply.txt
          '''
          def tfApply = readFile file: 'tfApply.txt'
          tfApply = tfApply.replaceAll('"', "'")
          tfApply = tfApply.replaceAll('\n', '<br>')
          env.TF_APPLY_OUTPUT = tfApply
          if (exitCode != 0) {
            error message: tfApply
          }
        }
      }
    }
  }
  post {
    always {
      script {
        if (env.GITHUB_REPOSITORY_HOST != null) {
          def appWebToken = sh returnStdout: true, script: '''#!/bin/bash
            set -ex
            python3 "$WORKSPACE$GITHUB_APP_AUTH_TOKEN_GENERATOR" "$GITHUB_APP_KEY_FILE_USR" "$GITHUB_APP_KEY_FILE" "$GITHUB_APP_AUTH_TOKEN_SECONDS" 'RS256'
          '''
          def appAuthTokenCreate = httpRequest url: "$GITHUB_REPOSITORY_HOST/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT"], [name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT_AUTH"], [name: 'Authorization', value: "Bearer $appWebToken"]]
          def appAuthToken = readJSON text: appAuthTokenCreate.content
          env.GITHUB_APP_AUTH_TOKEN = appAuthToken.token
          if (env.TF_APPLY_OUTPUT != null) {
            def pullRequestCommentBody = env.TF_APPLY_OUTPUT
            httpRequest url: "$GITHUB_PULL_REQUEST_COMMENTS_URL", httpMode: 'POST', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT"], [name: 'Authorization', value: "token $GITHUB_APP_AUTH_TOKEN"]], requestBody: "{\"body\":\"$pullRequestCommentBody\"}"
          }
        }
      }
    }
    failure {
      sh script: '''#!/bin/bash
        set -ex
        git revert -m 1 "$GITHUB_PULL_REQUEST_MERGE_HASH"
        git remote set-url origin "$GITHUB_REMOTE_ORIGIN_URL"
        git push origin HEAD:"$GITHUB_PULL_REQUEST_REFERENCE_HEAD"
      '''
      script {
        def pullRequestTitle = "Revert Pull Request $GITHUB_PULL_REQUEST_NUMBER"
        httpRequest url: "$GITHUB_REPOSITORY_URL/pulls", httpMode: 'POST', contentType: 'APPLICATION_JSON', customHeaders: [[name: 'Accept', value: "$GITHUB_API_HEADER_ACCEPT"], [name: 'Authorization', value: "token $GITHUB_APP_AUTH_TOKEN"]], requestBody: "{\"title\":\"$pullRequestTitle\", \"base\":\"$GITHUB_PULL_REQUEST_REFERENCE_BASE\", \"head\":\"$GITHUB_PULL_REQUEST_REFERENCE_HEAD\"}"
      }
    }
  }
}
