{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccounts": {
      "type": "array",
      "metadata": {
        "description": "The storage accounts."
      }
    },
    "storageShares": {
      "type": "array",
      "metadata": {
        "description": "The storage file shares."
      }
    },
    "storageContainers": {
      "type": "array",
      "metadata": {
        "description": "The storage file containers."
      }
    },
    "storageMounts": {
      "type": "array",
      "metadata": {
        "description": "The storage file mounts."
      }
    },
    "storageTargets": {
      "type": "array",
      "metadata": {
        "description": "The storage cache targets."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "The virtual network."
      }
    }
  },
  "variables": {
    "storageAccountApiVersion": "2020-08-01-preview"
  },
  "functions": [
    {
      "namespace": "fx",
      "members": {
        "GetVirtualNetworkRules": {
          "parameters": [
            {
              "name": "storageNetwork",
              "type": "object"
            },
            {
              "name": "computeNetwork",
              "type": "object"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(empty(parameters('computeNetwork')), concat('[{\"id\": \"', resourceId(parameters('storageNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('storageNetwork').name, parameters('storageNetwork').subnetName), '\"}]'), concat('[{\"id\": \"', resourceId(parameters('storageNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('storageNetwork').name, parameters('storageNetwork').subnetName), '\"}, {\"id\": \"', resourceId(parameters('computeNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('computeNetwork').name, parameters('computeNetwork').subnetName), '\"}]'))]"
          }
        }
      }
    }
  ],
  "resources": [
    {
      "condition": "[parameters('storageAccounts')[copyIndex()].deploy]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccounts')[copyIndex()].name]",
      "apiVersion": "[variables('storageAccountApiVersion')]",
      "location": "[resourceGroup().location]",
      "kind": "[parameters('storageAccounts')[copyIndex()].type]",
      "sku": {
        "name": "[parameters('storageAccounts')[copyIndex()].replication]"
      },
      "properties": {
        "isHnsEnabled": "[parameters('storageAccounts')[copyIndex()].namespaceHierarchy]",
        "isNfsV3Enabled": "[parameters('storageAccounts')[copyIndex()].networkFileSystemV3]",
        "supportsHttpsTrafficOnly": "[parameters('storageAccounts')[copyIndex()].httpsTrafficOnly]",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "[parameters('storageAccounts')[copyIndex()].networkAccessControl.defaultAction]",
          "ipRules": "[parameters('storageAccounts')[copyIndex()].networkAccessControl.firewallAddressRules]",
          "virtualNetworkRules": "[json(fx.GetVirtualNetworkRules(parameters('virtualNetwork'), parameters('storageAccounts')[copyIndex()].networkAccessControl.clientVirtualNetwork))]"
        },
        "allowBlobPublicAccess": false
      },
      "copy": {
        "name": "storageAccounts",
        "count": "[length(parameters('storageAccounts'))]"
      }
    },
    {
      "condition": "[parameters('storageShares')[copyIndex()].deploy]",
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "name": "[concat(parameters('storageShares')[copyIndex()].accountName, '/default/', parameters('storageShares')[copyIndex()].name)]",
      "apiVersion": "[variables('storageAccountApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageShares')[copyIndex()].accountName)]"
      ],
      "properties": {
        "shareQuota": "[parameters('storageShares')[copyIndex()].size]",
        "enabledProtocols": "[parameters('storageShares')[copyIndex()].protocols]"
      },
      "copy": {
        "name": "storageShares",
        "count": "[length(parameters('storageShares'))]"
      }
    },
    {
      "condition": "[parameters('storageContainers')[copyIndex()].deploy]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "name": "[concat(parameters('storageContainers')[copyIndex()].accountName, '/default/', parameters('storageContainers')[copyIndex()].name)]",
      "apiVersion": "[variables('storageAccountApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageContainers')[copyIndex()].accountName)]"
      ],
      "properties": {
        "publicAccess": "None"
      },
      "copy": {
        "name": "storageContainers",
        "count": "[length(parameters('storageContainers'))]"
      }
    }
  ],
  "outputs": {
    "storageAccounts": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('storageAccounts'))]",
        "input": {
          "name": "[parameters('storageAccounts')[copyIndex()].name]",
          "resourceGroupName": "[resourceGroup().name]"
        }
      }
    },
    "storageMounts": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('storageMounts'))]",
        "input": {
          "source": "[parameters('storageMounts')[copyIndex()].source]",
          "options": "[parameters('storageMounts')[copyIndex()].options]",
          "path": "[parameters('storageMounts')[copyIndex()].path]",
          "drive": "[parameters('storageMounts')[copyIndex()].drive]"
        }
      }
    },
    "storageTargets": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('storageTargets'))]",
        "input": {
          "name": "Azure-Object-Storage",
          "source": "[concat(parameters('storageTargets')[copyIndex()].accountName, '.', parameters('storageTargets')[copyIndex()].accountType, '.core.windows.net:/', parameters('storageTargets')[copyIndex()].accountName, '/', parameters('storageTargets')[copyIndex()].exportName)]",
          "protocols": "[parameters('storageTargets')[copyIndex()].protocols]",
          "junctions": [
          ]
        }
      }
    }
  }
}
