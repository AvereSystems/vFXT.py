{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "renderManager": {
      "type": "object",
      "metadata": {
        "description": "The render farm manager configuration."
      }
    },
    "imageGalleryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the shared image gallery."
      }
    },
    "imageDefinition": {
      "type": "object",
      "metadata": {
        "description": "The definition of the shared image."
      }
    },
    "imageBuilder": {
      "type": "object",
      "metadata": {
        "description": "The builder of the shared image."
      }
    }
  },
  "variables": {
    "imageBuilderApiVersion": "2019-05-01-preview"
  },
  "resources": [
    {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "[variables('imageBuilderApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('imageBuilder').templateName]",
      "properties": {
        "buildTimeoutInMinutes": "[parameters('imageBuilder').timeoutMinutes]",
        "source": {
          "type": "PlatformImage",
          "publisher": "[parameters('imageDefinition').publisher]",
          "offer": "[parameters('imageDefinition').offer]",
          "sku": "[parameters('imageDefinition').sku]",
          "version": "[parameters('imageDefinition').version]"
        },
        "customize": [
          {
            "name": "OpenCue",
            "type": "Shell",
            "inline": [
              "yum -y install postgresql-contrib",
              "yum -y install java-1.8.0-openjdk",
              "[concat('useradd --system --create-home ', replace(replace(parameters('renderManager').rootDirectory, 'home', ''), '/', ''))]",
              "[concat('cd ', parameters('renderManager').rootDirectory)]",
              "[concat('curl --location ', parameters('renderManager').databaseSchemaUrl, ' --output opencue-cuebot-schema.sql')]",
              "[concat('curl --location ', parameters('renderManager').databaseDataUrl, ' --output opencue-cuebot-data.sql')]",
              "[concat('curl --location ', parameters('renderManager').softwareUrl, ' --output opencue-cuebot.jar')]",
              "[concat('curl --location ', parameters('renderManager').serviceUrl, ' --output opencue-cuebot.service')]",
              "sed --in-place '/Environment=DB_URL/d' opencue-cuebot.service",
              "sed --in-place '/Environment=DB_USER/d' opencue-cuebot.service",
              "sed --in-place '/Environment=DB_PASS/d' opencue-cuebot.service",
              "sed --in-place '/Environment=JAR_PATH/d' opencue-cuebot.service",
              "[concat('sed --in-place ''/Environment=OPTIONS/i Environment=DB_URL=', parameters('renderManager').databaseEndpoint, ''' opencue-cuebot.service')]",
              "[concat('sed --in-place ''/Environment=OPTIONS/i Environment=DB_USER=', parameters('renderManager').databaseUsername, ''' opencue-cuebot.service')]",
              "[concat('sed --in-place ''/Environment=OPTIONS/i Environment=DB_PASS=', parameters('renderManager').databasePassword, ''' opencue-cuebot.service')]",
              "[concat('sed --in-place ''/Environment=OPTIONS/a Environment=JAR_PATH=', parameters('renderManager').rootDirectory, 'opencue-cuebot.jar'' opencue-cuebot.service')]",
              "sed --in-place '/SyslogIdentifier/a RestartSec=30' opencue-cuebot.service",
              "sed --in-place '/SyslogIdentifier/a Restart=always' opencue-cuebot.service",
              "cp opencue-cuebot.service /etc/systemd/system"
            ]
          }
        ],
        "distribute": [
          {
            "type": "SharedImage",
            "runOutputName": "SharedImage",
            "galleryImageId": "[resourceId('Microsoft.Compute/galleries/images', parameters('imageGalleryName'), parameters('imageDefinition').name)]",
            "replicationRegions": [
              "[resourceGroup().location]"
            ],
            "artifactTags": {
              "imageTemplate": "[parameters('imageBuilder').templateName]"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "imageTemplateName": {
      "type": "string",
      "value": "[parameters('imageBuilder').templateName]"
    }
  }
}