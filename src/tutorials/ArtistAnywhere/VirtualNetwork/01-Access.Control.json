{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "userIdentity": {
      "type": "object",
      "metadata": {
        "description": "The managed user identity."
      }
    },
    "storageAccount": {
      "type": "object",
      "metadata": {
        "description": "The object storage account."
      }
    },
    "keyVault": {
      "type": "object",
      "metadata": {
        "description": "The key vault."
      }
    },
    "logAnalytics": {
      "type": "object",
      "metadata": {
        "description": "The log analytics."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "The virtual network subnet."
      }
    }
  },
  "variables": {
    "roleAssignmentApiVersion": "2020-03-01-preview",
    "storageApiVersion": "2019-06-01",
    "storageAccountName": "[toLower(parameters('storageAccount').name)]",
    "storageReaderRoleId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
    "keyVaultApiVersion": "2019-09-01",
    "managedIdentityApiVersion": "2018-11-30",
    "operationalInsightsApiVersion": "2020-03-01-preview"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[parameters('userIdentity').name]",
      "apiVersion": "[variables('managedIdentityApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "kind": "[parameters('storageAccount').type]",
      "sku": {
        "name": "[parameters('storageAccount').replication]"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true
        }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', guid(variables('storageReaderRoleId'), variables('storageAccountName')))]",
      "apiVersion": "[variables('roleAssignmentApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userIdentity').name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userIdentity').name), variables('managedIdentityApiVersion')).principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageReaderRoleId'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVault').name]",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVault').name)]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('keyVault').tier]",
          "family": "A"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": "true",
        "enabledForDiskEncryption": "true",
        "enabledForTemplateDeployment": "true",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('keyVault').adminId]",
            "permissions": {
              "keys": [
                "All"
              ],
              "secrets": [
                "All"
              ],
              "certificates": [
                "All"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVault').name), variables('managedIdentityApiVersion')).principalId]",
            "permissions": {
              "secrets": [
                "Get"
              ]
            }
          }
        ],
        "networkAcls": {
          "defaultAction": "Deny",
          "virtualNetworkRules": [
            {
              "id": "[resourceId(parameters('virtualNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnetName)]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[parameters('logAnalytics').name]",
      "apiVersion": "[variables('operationalInsightsApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "[parameters('logAnalytics').tier]"
        }
      }
    }
  ],
  "outputs": {
    "managedIdentity": {
      "type": "object",
      "value": {
        "userResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userIdentity').name)]",
        "userPrincipalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userIdentity').name), variables('managedIdentityApiVersion')).principalId]"
      }
    },
    "keyVault": {
      "type": "object",
      "value": {
        "uri": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name), variables('keyVaultApiVersion')).vaultUri]"
      }
    },
    "logAnalytics": {
      "type": "object",
      "value": {
        "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalytics').name), variables('operationalInsightsApiVersion')).customerId]",
        "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalytics').name), variables('operationalInsightsApiVersion')).primarySharedKey]"
      }
    }
  }
}
