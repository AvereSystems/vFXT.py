{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "The virtual network."
      }
    },
    "virtualNetworkGateway": {
      "type": "object",
      "metadata": {
        "description": "The virtual network gateway."
      }
    },
    "storageNetwork": {
      "type": "object",
      "metadata": {
        "description": "The storage virtual network."
      }
    }
  },
  "variables": {
    "virtualNetworkApiVersion": "2020-05-01",
    "virtualNetworkDomainApiVersion": "2020-01-01",
    "resourceDeploymentApiVersion": "2019-09-01",
    "roleAssignmentApiVersion": "2020-04-01-preview"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetwork').name]",
      "apiVersion": "[variables('virtualNetworkApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('virtualNetwork').addressSpace]"
          ]
        },
        "dhcpOptions": {
          "dnsServers": "[parameters('virtualNetwork').domainServers]"
        },
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('virtualNetwork').subnets)]",
            "input": {
              "name": "[parameters('virtualNetwork').subnets[copyIndex('subnets')].name]",
              "properties": "[parameters('virtualNetwork').subnets[copyIndex('subnets')].properties]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[parameters('virtualNetwork').domainName]",
      "apiVersion": "[variables('virtualNetworkDomainApiVersion')]",
      "location": "global",
      "properties": {
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "name": "[concat(parameters('virtualNetwork').domainName, '/', parameters('virtualNetwork').name)]",
      "apiVersion": "[variables('virtualNetworkDomainApiVersion')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]",
        "[resourceId('Microsoft.Network/privateDnsZones', parameters('virtualNetwork').domainName)]"
      ],
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
        },
        "registrationEnabled": true
      }
    },
    {
      "condition": "[parameters('virtualNetworkGateway').enabled]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('virtualNetwork').name]",
      "apiVersion": "[variables('virtualNetworkApiVersion')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('virtualNetworkGateway').ipAddress.type]"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('virtualNetworkGateway').ipAddress.allocationMethod]"
      }
    },
    {
      "condition": "[parameters('virtualNetworkGateway').enabled]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[parameters('virtualNetwork').name]",
      "apiVersion": "[variables('virtualNetworkApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('virtualNetwork').name)]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('virtualNetworkGateway').vpnTier]",
          "tier": "[parameters('virtualNetworkGateway').vpnTier]"
        },
        "vpnGatewayGeneration": "[parameters('virtualNetworkGateway').vpnGeneration]",
        "vpnType": "[parameters('virtualNetworkGateway').vpnType]",
        "gatewayType": "[parameters('virtualNetworkGateway').type]",
        "ipConfigurations": [
          {
            "name": "ipConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, 'GatewaySubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('virtualNetwork').name)]"
              }
            }
          }
        ],
        "vpnClientConfiguration": {
          "vpnClientProtocols": "[parameters('virtualNetworkGateway').vpnClient.protocols]",
          "vpnClientAddressPool": {
            "addressPrefixes": [
              "[parameters('virtualNetworkGateway').vpnClient.addressSpace]"
            ]
          },
          "vpnClientRootCertificates": [
            {
              "name": "[parameters('virtualNetworkGateway').vpnClient.rootCertificateName]",
              "properties": {
                "publicCertData": "[parameters('virtualNetworkGateway').vpnClient.rootCertificateData]"
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[and(parameters('virtualNetworkGateway').enabled, not(equals(parameters('storageNetwork').name, '')))]",
      "type": "Microsoft.Network/connections",
      "name": "[parameters('virtualNetwork').name]",
      "apiVersion": "[variables('virtualNetworkApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetwork').name)]"
      ],
      "properties": {
        "connectionType": "Vnet2Vnet",
        "connectionProtocol": "[parameters('virtualNetworkGateway').connection.protocol]",
        "sharedKey": "[parameters('virtualNetworkGateway').connection.key]",
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetwork').name)]"
        },
        "virtualNetworkGateway2": {
          "id": "[resourceId(parameters('storageNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworkGateways', parameters('storageNetwork').name)]"
        }
      }
    },
    {
      "condition": "[and(parameters('virtualNetworkGateway').enabled, not(equals(parameters('storageNetwork').name, '')))]",
      "type": "Microsoft.Resources/deployments",
      "name": "00-Network.Connections",
      "apiVersion": "[variables('resourceDeploymentApiVersion')]",
      "resourceGroup": "[parameters('storageNetwork').resourceGroupName]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetwork').name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/connections",
              "name": "[parameters('storageNetwork').name]",
              "apiVersion": "[variables('virtualNetworkApiVersion')]",
              "location": "[parameters('storageNetwork').regionName]",
              "properties": {
                "connectionType": "Vnet2Vnet",
                "connectionProtocol": "[parameters('virtualNetworkGateway').connection.protocol]",
                "sharedKey": "[parameters('virtualNetworkGateway').connection.key]",
                "virtualNetworkGateway1": {
                  "id": "[resourceId(parameters('storageNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworkGateways', parameters('storageNetwork').name)]"
                },
                "virtualNetworkGateway2": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetwork').name)]"
                }
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "virtualNetwork": {
      "type": "object",
      "value": "[parameters('virtualNetwork')]"
    }
  }
}
