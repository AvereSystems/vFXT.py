{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "managedIdentity": {
      "type": "object"
    },
    "computeManager": {
      "type": "object"
    },
    "logAnalytics": {
      "type": "object"
    },
    "virtualNetwork": {
      "type": "object"
    }
  },
  "variables": {
    "virtualNetworkApiVersion": "2020-08-01",
    "virtualMachineApiVersion": "2020-12-01",
    "networkInterfaceApiVersion": "2020-08-01",
    "loadBalancerApiVersion": "2020-08-01",
    "operationalInsightApiVersion": "2020-10-01",
    "availabilitySetApiVersion": "2020-12-01",
    "loadBalancerName": "ComputeManagers",
    "loadBalancerRuleName": "lbRule",
    "loadBalancerProbeName": "lbProbe",
    "loadBalancerFrontendName": "lbFrontendConfig",
    "loadBalancerBackendName": "lbBackendPool",
    "loadBalancerBackendPools": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), variables('loadBalancerBackendName'))]"
      }
    ]
  },
  "functions": [
    {
      "namespace": "fx",
      "members": {
        "GetLinuxConfig": {
          "parameters": [
            {
              "name": "sshPublicKeyData",
              "type": "string"
            },
            {
              "name": "adminUserName",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if(equals(parameters('sshPublicKeyData'), ''), 'null', concat('{\"ssh\": {\"publicKeys\": [{\"path\": \"/home/', parameters('adminUsername'), '/.ssh/authorized_keys\", \"keyData\": \"', parameters('sshPublicKeyData'), '\"}]}}'))]"
          }
        }
      }
    }
  ],
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('loadBalancerName')]",
      "apiVersion": "[variables('availabilitySetApiVersion')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": "[parameters('computeManager').availabilitySet.faultDomains]",
        "platformUpdateDomainCount": "[parameters('computeManager').availabilitySet.updateDomains]"
      }
    },
    {
      "condition": "[greater(parameters('computeManager').machines.count, 1)]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "apiVersion": "[variables('loadBalancerApiVersion')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('loadBalancerBackendName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('loadBalancerFrontendName')]",
            "properties": {
              "subnet": {
                "id": "[resourceId(parameters('virtualNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnetName)]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('loadBalancerRuleName')]",
            "properties": {
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), variables('loadBalancerBackendName'))]"
              },
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), variables('loadBalancerFrontendName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), variables('loadBalancerProbeName'))]"
              },
              "backendPort": "[parameters('computeManager').loadBalancer.port]",
              "frontendPort": "[parameters('computeManager').loadBalancer.port]",
              "protocol": "[parameters('computeManager').loadBalancer.protocol]"
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('loadBalancerProbeName')]",
            "properties": {
              "port": "[parameters('computeManager').loadBalancer.port]",
              "protocol": "[parameters('computeManager').loadBalancer.protocol]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('computeManager').machines.namePrefix, copyIndex())]",
      "apiVersion": "[variables('networkInterfaceApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]"
      ],
      "properties": {
        "primary": true,
        "ipConfigurations": [
          {
            "name": "ipConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId(parameters('virtualNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnetName)]"
              },
              "loadBalancerBackendAddressPools": "[if(greater(parameters('computeManager').machines.count, 1), variables('loadBalancerBackendPools'), json('null'))]"
            }
          }
        ]
      },
      "copy": {
        "name": "computeManagers",
        "count": "[parameters('computeManager').machines.count]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('computeManager').machines.namePrefix, copyIndex())]",
      "apiVersion": "[variables('virtualMachineApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('loadBalancerName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('computeManager').machines.namePrefix, copyIndex()))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId(parameters('managedIdentity').resourceGroupName, 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentity').name)]": {
          }
        }
      },
      "plan": {
        "name": "[parameters('computeManager').image.sku]",
        "product": "[parameters('computeManager').image.offer]",
        "publisher": "[parameters('computeManager').image.publisher]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('loadBalancerName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('computeManager').machines.size]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('computeManager').machines.namePrefix, copyIndex()))]"
            }
          ]
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('computeManager').image.publisher]",
            "offer": "[parameters('computeManager').image.offer]",
            "sku": "[parameters('computeManager').image.sku]",
            "version": "[parameters('computeManager').image.version]"
          },
          "osDisk": {
            "caching": "ReadOnly",
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "[concat(parameters('computeManager').machines.namePrefix, copyIndex())]",
          "adminUsername": "[parameters('computeManager').machines.adminUsername]",
          "adminPassword": "[parameters('computeManager').machines.adminPassword]",
          "linuxConfiguration": "[json(fx.GetLinuxConfig(parameters('computeManager').machines.sshPublicKeyData, parameters('computeManager').machines.adminUsername))]"
        }
      },
      "copy": {
        "name": "computeManagers",
        "count": "[parameters('computeManager').machines.count]"
      }
    },
    {
      "condition": "[parameters('logAnalytics').deploy]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('computeManager').machines.namePrefix, copyIndex(), '/monitor')]",
      "apiVersion": "[variables('virtualMachineApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', concat(parameters('computeManager').machines.namePrefix, copyIndex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "OmsAgentForLinux",
        "typeHandlerVersion": "1.13",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "workspaceKey": "[listKeys(resourceId(parameters('logAnalytics').resourceGroupName, 'Microsoft.OperationalInsights/workspaces', parameters('logAnalytics').name), variables('operationalInsightApiVersion')).primarySharedKey]"
        },
        "settings": {
          "workspaceId": "[reference(resourceId(parameters('logAnalytics').resourceGroupName, 'Microsoft.OperationalInsights/workspaces', parameters('logAnalytics').name), variables('operationalInsightApiVersion')).customerId]"
        }
      },
      "copy": {
        "name": "computeManagers",
        "count": "[parameters('computeManager').machines.count]"
      }
    }
  ],
  "outputs": {
    "computeManager": {
      "type": "object",
      "value": {
        "host": "[if(greater(parameters('computeManager').machines.count, 1), reference(resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), variables('loadBalancerFrontendName')), variables('virtualNetworkApiVersion')).privateIPAddress, reference(resourceId('Microsoft.Network/networkInterfaces', concat(parameters('computeManager').machines.namePrefix, '0')), variables('virtualNetworkApiVersion')).ipConfigurations[0].properties.privateIPAddress)]"
      }
    },
    "eventGridTopicId": {
      "type": "string",
      "value": "[resourceId('Microsoft.EventGrid/topics', parameters('computeManager').machines.namePrefix)]"
    }
  }
}
