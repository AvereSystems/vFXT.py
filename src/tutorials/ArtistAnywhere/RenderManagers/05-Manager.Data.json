{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "renderManager": {
      "type": "object",
      "metadata": {
        "description": "The render farm manager configuration."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network resource group."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network resource."
      }
    },
    "virtualNetworkSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network subnet."
      }
    }
  },
  "variables": {
    "dataServerApiVersion": "2017-12-01",
    "dataServerName": "[toLower(parameters('renderManager').dataServerName)]",
    "dataServerHost": "[concat(variables('dataServerName'), '.postgres.database.azure.com')]",
    "databaseAdminUsername": "[concat(parameters('renderManager').databaseAdminUsername, '@', variables('dataServerName'))]",
    "managedIdentityApiVersion": "2018-11-30",
    "keyVaultApiVersion": "2019-09-01"
  },
  "resources": [
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "[variables('dataServerApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('dataServerName')]",
      "sku": {
        "name": "[parameters('renderManager').dataServerType]"
      },
      "properties": {
        "version": "[parameters('renderManager').dataServerSqlVersion]",
        "administratorLogin": "[parameters('renderManager').databaseAdminUsername]",
        "administratorLoginPassword": "[parameters('renderManager').databaseAdminPassword]",
        "storageProfile": {
          "storageMB": "[parameters('renderManager').dataServerStorageMB]",
          "storageAutoGrow": "[parameters('renderManager').dataServerStorageAutoGrow]",
          "backupRetentionDays": "[parameters('renderManager').dataServerBackupRetentionDays]"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers/virtualNetworkRules",
      "apiVersion": "[variables('dataServerApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('dataServerName'), '/virtualNetwork')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('dataServerName'))]"
      ],
      "properties": {
        "virtualNetworkSubnetId": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('virtualNetworkSubnetName'))]"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers/databases",
      "apiVersion": "[variables('dataServerApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('dataServerName'), '/', parameters('renderManager').databaseName)]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('dataServerName'))]"
      ],
      "properties": {
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "[variables('managedIdentityApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('renderManager').keyVaultName]",
      "properties": {
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('renderManager').keyVaultName]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('renderManager').keyVaultName)]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('renderManager').keyVaultTier]",
          "family": "A"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": "true",
        "enabledForDiskEncryption": "true",
        "enabledForTemplateDeployment": "true",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('renderManager').keyVaultAdminId]",
            "permissions": {
              "keys": [
                "All"
              ],
              "secrets": [
                "All"
              ],
              "certificates": [
                "All"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('renderManager').keyVaultName), variables('managedIdentityApiVersion')).principalId]",
            "permissions": {
              "secrets": [
                "Get"
              ]
            }
          }
        ],
        "networkAcls": {
          "defaultAction": "Deny",
          "virtualNetworkRules": [
            {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('virtualNetworkSubnetName'))]"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "managerDatabaseAdminSql": {
      "type": "string",
      "value": "[concat('host=', variables('dataServerHost'), ' port=5432 sslmode=require dbname=', parameters('renderManager').databaseName, ' user=', variables('databaseAdminUsername'), ' password=', parameters('renderManager').databaseAdminPassword)]"
    },
    "managerDatabaseEndpoint": {
      "type": "string",
      "value": "[concat('jdbc:postgresql://', variables('dataServerHost'), ':5432/', parameters('renderManager').databaseName, '?sslmode=require')]"
    },
    "managerDatabaseUsername": {
      "type": "string",
      "value": "[variables('databaseAdminUsername')]"
    },
    "managerDatabasePassword": {
      "type": "string",
      "value": "[parameters('renderManager').databaseAdminPassword]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('renderManager').keyVaultName), variables('managedIdentityApiVersion')).principalId]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('renderManager').keyVaultName), variables('keyVaultApiVersion')).vaultUri]"
    }
  }
}